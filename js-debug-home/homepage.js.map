{"version":3,"sources":["CSS3DRenderer.js","beep.js","water.js","scene.js"],"names":["THREE","CSS3DObject","element","Object3D","call","style","position","addEventListener","parentNode","removeChild","prototype","Object","create","constructor","CSS3DSprite","CSS3DRenderer","console","log","REVISION","_width","_height","_widthHalf","_heightHalf","matrix","Matrix4","cache","camera","fov","objects","domElement","document","createElement","overflow","cameraElement","WebkitTransformStyle","MozTransformStyle","transformStyle","appendChild","isIE","test","navigator","userAgent","setClearColor","getSize","width","height","setSize","epsilon","value","Math","abs","getCameraCSSMatrix","elements","getObjectCSSMatrix","cameraCSSMatrix","matrix3d","renderObject","object","copy","matrixWorldInverse","transpose","copyPosition","matrixWorld","scale","cachedStyle","id","undefined","WebkitTransform","MozTransform","transform","distanceToCameraSquared","getDistanceToSquared","i","l","children","length","a","Vector3","b","object1","object2","setFromMatrixPosition","distanceToSquared","zOrder","scene","order","keys","sort","zMax","traverse","index","indexOf","zIndex","render","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","perspective","updateMatrixWorld","parent","getInverse","ns","utils","amplify","gain","sample","ushort","String","fromCharCode","ulong","gcd","a_","lcm","floor","compose","fns","map","fn","items","result","push","getattr","attr","zip","arguments","lists","Array","slice","min","apply","sum","numbers","foldl","bind","ctx","args","mulmod","c","range","len","Beep","samplerate","channels","bitdepth","sine","factor","PI","parseFloat","n","sin","generate","freqs","periods","time","freq","t","encode","duration","filters","transforms","concat","samples","reps","ceil","fulldata","join","data","substr","fmtChunk","PCM_CHUNK_SIZE","LINEAR_QUANTIZATION","dataChunk","header","play","callback","btoa","audio","src","onended","window","NS_BEEP","ReflectorShader","uniforms","type","vertexShader","fragmentShader","Reflector","renderer","world","options","Mesh","defineProperties","configurable","enumerable","writable","offset","clipBias","resolution","useStencilBuffer","_renderer","_camera","_world","_reflectionPlane","Plane","_reflectionMatrix","_reflectorCamera","PerspectiveCamera","_sceneReflector","_reflectionMap","_textureMatrix","_cameraHelper","_directionHelper","property","hasOwnProperty","_init","update","_beforeRender","_render","_afterRender","updateMatrix","makeReflectionPlane","makeReflectionMatrix","normal","quaternion","Quaternion","decompose","set","applyQuaternion","normalize","add","setFromNormalAndCoplanarPoint","x","y","z","constant","geometry","PlaneBufferGeometry","matrixAutoUpdate","material","MeshBasicMaterial","color","getClearColor","depthWrite","Scene","ShaderMaterial","UniformsUtils","clone","_createRenderTarget","reflectionMap","texture","textureMatrix","_updateCamera","_updateStencilBuffer","_updateTextureMatrix","_updateClipping","visible","_updateCulling","gl","context","glState","state","disable","STENCIL_TEST","enable","stencilFunc","ALWAYS","stencilOp","REPLACE","KEEP","EQUAL","multiply","projectionMatrix","_updateHelpers","setDirection","getWorldDirection","_addHelpers","helperGeometry","BoxGeometry","helperMaterial","ArrowHelper","addObject3D","self","traverseVisible","MultiMaterial","materials","_flipFaceCulling","side","DoubleSide","FrontSide","BackSide","Vector2","parameter","format","RGBFormat","stencilBuffer","WebGLRenderTarget","clipPlane","clipVector","q","Vector4","applyMatrix4","sign","w","multiplyScalar","dot","RefractorShader","Refractor","_refractionPlane","_refractorCamera","_refractionMap","makeRefractionPlane","negate","refractionMap","WaterShader","Water","waterSpeed","waterColor","Color","waterReflectivity","lightDirection","lightColor","shininess","segments","cycle","_reflector","_refractor","_halfCycle","delta","flowMapOffset0","flowMapOffset1","flowMap","TextureLoader","setCrossOrigin","load","noiseMap","normalMap0","wrapS","wrapT","RepeatWrapping","normalMap1","textureMatrixReflection","textureMatrixRefraction","halfCycle","colours","controls","sceneGL","rendererGL","clock","rendererCSS3D","sceneCSS3D","ytWidth","ytHeight","vidWall","Element","ry","screenID","div","toString","backgroundColor","iframe","setAttribute","border","rotation","s1","s2","s3","s4","onYouTubeIframeAPIReady","YT","Player","events","onPlayerReady","onPlayerStateChange","event","target","playVideo","YTdone","PlayerState","PLAYING","setTimeout","stopVideo","water","phaseCubeApproach","phaseMoonPushBack","phaseMoonApproach","phaseSink","moonz","moonMesh","starsMesh","num_cylinders","num_cylinders_so_far","cylinderMasterOpacity","range_cylinders","cylinders","calmCylinders","YES","NO","PENDING","saveCycles","fps","frames","accDelta","YouTubeVidWall","tag","firstScriptTag","getElementsByTagName","insertBefore","Group","init","initscale","cubes","cad","innerHeight","innerWidth","getNewXartaCube","animate","xPos","yPos","zPos","word","colourStartIndex","RIGHT","RIGHTcontext","getContext","shadowColor","shadowBlur","fillStyle","fillRect","font","fillText","LEFT","LEFTcontext","TOP","TOPcontext","BOTTOM","BOTTOMcontext","FRONT","FRONTcontext","RIGHTmesh","Texture","transparent","opacity","needsUpdate","LEFTmesh","TOPmesh","BOTTOMmesh","FRONTmesh","textureLoader","setPath","shading","FlatShading","obj","name","xartaRot","cubesToTumble","tumble","transformRate","xartaRotAcc","forEach","cube","ar","approachRate","fit","scalarCAD","scalarCADsoFar","scalarCADsoFarFraction","whoop","yBottom","xartaDirx","xartaDiry","xartaDirz","cylinderOpacity","moveRate","random","loader","stars","loadTime","Date","now","timerStart","Clock","camFarPlane","rendererglZ","top","WebGLRenderer","fog","FogExp2","alpha","antialias","Fog","setPixelRatio","devicePixelRatio","autoclear","container","getElementById","PlaneGeometry","getTheMoon","theMoon","moonLoaded","depthTest","setHex","getRandomInt","max","getRandomCol","randColour","replace","geometryDefault","CylinderGeometry","materialDefault","MeshPhongMaterial","geometrySphere","SphereGeometry","geometryComplex","Geometry","count","geo","translate","randFloat","faces","face","vertexColors","merge","materialComplex","VertexColors","start","addShape","setColour","geometrySimple","materialSimple","BoxBufferGeometry","light","DirectionalLight","spotLight","SpotLight","spotTarget","onWindowResize","aspect","updateProjectionMatrix","calcFps","displayCamPos","p","innerHTML","round","requestAnimationFrame","getDelta","video","readyState","HAVE_ENOUGH_DATA","videoImageContext","drawImage","videoTexture"],"mappings":"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","file":"homepage.js","sourcesContent":["\"use strict\";\r\n/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CSS3DObject = function ( element ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.element = element;\r\n\tthis.element.style.position = 'absolute';\r\n\r\n\tthis.addEventListener( 'removed', function () {\r\n\r\n\t\tif ( this.element.parentNode !== null ) {\r\n\r\n\t\t\tthis.element.parentNode.removeChild( this.element );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function ( element ) {\r\n\r\n\tTHREE.CSS3DObject.call( this, element );\r\n\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create( THREE.CSS3DObject.prototype );\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function () {\r\n\r\n\tconsole.log( 'THREE.CSS3DRenderer', THREE.REVISION );\r\n\r\n\tvar _width, _height;\r\n\tvar _widthHalf, _heightHalf;\r\n\r\n\tvar matrix = new THREE.Matrix4();\r\n\r\n\tvar cache = {\r\n\t\tcamera: { fov: 0, style: '' },\r\n\t\tobjects: {}\r\n\t};\r\n\r\n\tvar domElement = document.createElement( 'div' );\r\n\tdomElement.style.overflow = 'hidden';\r\n\r\n\tthis.domElement = domElement;\r\n\r\n\tvar cameraElement = document.createElement( 'div' );\r\n\r\n\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\r\n\tcameraElement.style.MozTransformStyle = 'preserve-3d';\r\n\tcameraElement.style.transformStyle = 'preserve-3d';\r\n\r\n\tdomElement.appendChild( cameraElement );\r\n\r\n\tvar isIE = /Trident/i.test( navigator.userAgent );\r\n\r\n\tthis.setClearColor = function () {};\r\n\r\n\tthis.getSize = function () {\r\n\r\n\t\treturn {\r\n\t\t\twidth: _width,\r\n\t\t\theight: _height\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_width = width;\r\n\t\t_height = height;\r\n\t\t_widthHalf = _width / 2;\r\n\t\t_heightHalf = _height / 2;\r\n\r\n\t\tdomElement.style.width = width + 'px';\r\n\t\tdomElement.style.height = height + 'px';\r\n\r\n\t\tcameraElement.style.width = width + 'px';\r\n\t\tcameraElement.style.height = height + 'px';\r\n\r\n\t};\r\n\r\n\tfunction epsilon( value ) {\r\n\r\n\t\treturn Math.abs( value ) < 1e-10 ? 0 : value;\r\n\r\n\t}\r\n\r\n\tfunction getCameraCSSMatrix( matrix ) {\r\n\r\n\t\tvar elements = matrix.elements;\r\n\r\n\t\treturn 'matrix3d(' +\r\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 1 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 4 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 6 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 7 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 9 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 13 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 15 ] ) +\r\n\t\t')';\r\n\r\n\t}\r\n\r\n\tfunction getObjectCSSMatrix( matrix, cameraCSSMatrix ) {\r\n\r\n\t\tvar elements = matrix.elements;\r\n\t\tvar matrix3d = 'matrix3d(' +\r\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 1 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 4 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 6 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 7 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 9 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 13 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 15 ] ) +\r\n\t\t')';\r\n\r\n\t\tif ( isIE ) {\r\n\r\n\t\t\treturn 'translate(-50%,-50%)' +\r\n\t\t\t\t'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)' +\r\n\t\t\t\tcameraCSSMatrix +\r\n\t\t\t\tmatrix3d;\r\n\r\n\t\t}\r\n\r\n\t\treturn 'translate(-50%,-50%)' + matrix3d;\r\n\r\n\t}\r\n\r\n\tfunction renderObject( object, camera, cameraCSSMatrix ) {\r\n\r\n\t\tif ( object instanceof THREE.CSS3DObject ) {\r\n\r\n\t\t\tvar style;\r\n\r\n\t\t\tif ( object instanceof THREE.CSS3DSprite ) {\r\n\r\n\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n\t\t\t\tmatrix.copy( camera.matrixWorldInverse );\r\n\t\t\t\tmatrix.transpose();\r\n\t\t\t\tmatrix.copyPosition( object.matrixWorld );\r\n\t\t\t\tmatrix.scale( object.scale );\r\n\r\n\t\t\t\tmatrix.elements[ 3 ] = 0;\r\n\t\t\t\tmatrix.elements[ 7 ] = 0;\r\n\t\t\t\tmatrix.elements[ 11 ] = 0;\r\n\t\t\t\tmatrix.elements[ 15 ] = 1;\r\n\r\n\t\t\t\tstyle = getObjectCSSMatrix( matrix, cameraCSSMatrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld, cameraCSSMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar element = object.element;\r\n\t\t\tvar cachedStyle = cache.objects[ object.id ] && cache.objects[ object.id ].style;\r\n\r\n\t\t\tif ( cachedStyle === undefined || cachedStyle !== style ) {\r\n\r\n\t\t\t\telement.style.WebkitTransform = style;\r\n\t\t\t\telement.style.MozTransform = style;\r\n\t\t\t\telement.style.transform = style;\r\n\r\n\t\t\t\tcache.objects[ object.id ] = { style: style };\r\n\r\n\t\t\t\tif ( isIE ) {\r\n\r\n\t\t\t\t\tcache.objects[ object.id ].distanceToCameraSquared = getDistanceToSquared( camera, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( element.parentNode !== cameraElement ) {\r\n\r\n\t\t\t\tcameraElement.appendChild( element );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\r\n\r\n\t\t\trenderObject( object.children[ i ], camera, cameraCSSMatrix );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar getDistanceToSquared = function () {\r\n\r\n\t\tvar a = new THREE.Vector3();\r\n\t\tvar b = new THREE.Vector3();\r\n\r\n\t\treturn function ( object1, object2 ) {\r\n\r\n\t\t\ta.setFromMatrixPosition( object1.matrixWorld );\r\n\t\t\tb.setFromMatrixPosition( object2.matrixWorld );\r\n\r\n\t\t\treturn a.distanceToSquared( b );\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\tfunction zOrder( scene ) {\r\n\r\n\t\tvar order = Object.keys( cache.objects ).sort( function ( a, b ) {\r\n\r\n\t\t\treturn cache.objects[ a ].distanceToCameraSquared - cache.objects[ b ].distanceToCameraSquared;\r\n\r\n\t\t} );\r\n\t\tvar zMax = order.length;\r\n\r\n\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\tvar index = order.indexOf( object.id + '' );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tobject.element.style.zIndex = zMax - index;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tvar fov = 0.5 / Math.tan( THREE.Math.degToRad( camera.getEffectiveFOV() * 0.5 ) ) * _height;\r\n\r\n\t\tif ( cache.camera.fov !== fov ) {\r\n\r\n\t\t\tdomElement.style.WebkitPerspective = fov + 'px';\r\n\t\t\tdomElement.style.MozPerspective = fov + 'px';\r\n\t\t\tdomElement.style.perspective = fov + 'px';\r\n\r\n\t\t\tcache.camera.fov = fov;\r\n\r\n\t\t}\r\n\r\n\t\tscene.updateMatrixWorld();\r\n\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\tvar cameraCSSMatrix = 'translateZ(' + fov + 'px)' +\r\n\t\t\tgetCameraCSSMatrix( camera.matrixWorldInverse );\r\n\r\n\t\tvar style = cameraCSSMatrix +\r\n\t\t\t'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';\r\n\r\n\t\tif ( cache.camera.style !== style && ! isIE ) {\r\n\r\n\t\t\tcameraElement.style.WebkitTransform = style;\r\n\t\t\tcameraElement.style.MozTransform = style;\r\n\t\t\tcameraElement.style.transform = style;\r\n\r\n\t\t\tcache.camera.style = style;\r\n\r\n\t\t}\r\n\r\n\t\trenderObject( scene, camera, cameraCSSMatrix );\r\n\r\n\t\tif ( isIE ) {\r\n\r\n\t\t\t// IE10 and 11 does not support 'preserve-3d'.\r\n\t\t\t// Thus, z-order in 3D will not work.\r\n\t\t\t// We have to calc z-order manually and set CSS z-index for IE.\r\n\t\t\t// FYI: z-index can't handle object intersection\r\n\t\t\tzOrder( scene );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n","/**\r\n * Copyright 2010 Neuman Vong. All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *   1. Redistributions of source code must retain the above copyright notice,\r\n *   this list of conditions and the following disclaimer.\r\n *\r\n *   2. Redistributions in binary form must reproduce the above copyright\r\n *   notice, this list of conditions and the following disclaimer in the\r\n *   documentation and/or other materials provided with the distribution.\r\n */\r\n(function(ns) {\r\nvar utils = {\r\n    amplify: function(gain) {\r\n        return function(sample) {\r\n            return sample * gain; \r\n        };\r\n    },\r\n    ushort: function(sample) {\r\n        return String.fromCharCode(255 & sample,\r\n                                   255 & sample >> 8);\r\n    },\r\n    ulong: function(sample) {\r\n        return String.fromCharCode(255 & sample,\r\n                                   255 & sample >> 8,\r\n                                   255 & sample >> 16,\r\n                                   255 & sample >> 24);\r\n    },\r\n    gcd: function(a, b) {\r\n        while (b) {\r\n            var a_ = a;\r\n            a = b, b = a_ % b;\r\n        }\r\n        return a;\r\n    },\r\n    lcm: function(a, b) {\r\n        return Math.floor(a * b / utils.gcd(a, b));\r\n    },\r\n    compose: function(fns) {\r\n        return function(a) {\r\n            for (var i = 0; i < fns.length; i++) {\r\n                a = fns[i](a);\r\n            }\r\n            return a;\r\n        };\r\n    },\r\n    map: function(fn, items) {\r\n        var result = [];\r\n        for (var i = 0; i < items.length; i++) {\r\n            result.push(fn.call(this, items[i]));\r\n        }\r\n        return result;\r\n    },\r\n    getattr: function(attr) {\r\n        return function(items) {\r\n            return items[attr];\r\n        };\r\n    },\r\n    zip: function() {\r\n        if (arguments.length == 0) return [];\r\n        var lists = Array.prototype.slice.call(arguments);\r\n        var result = [];\r\n        var min = Math.min.apply(null, utils.map(utils.getattr(\"length\"), lists));\r\n        for (var i = 0; i < min; i++) {\r\n            result.push(utils.map(utils.getattr(i), lists));\r\n        }\r\n        return result;\r\n    },\r\n    sum: function(numbers) {\r\n        return utils.foldl(function(a, b) { return a + b; }, numbers);\r\n    },\r\n    bind: function(ctx, fn) {\r\n        return function() {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(ctx, args);\r\n        };\r\n    },\r\n    foldl: function(fn, items) {\r\n        if (items.length == 1) return items[0];\r\n        var result = fn(items[0], items[1]);\r\n        for (var i = 2; i < items.length; i++) {\r\n            result = fn(result, items[i]);\r\n        }\r\n        return result;\r\n    },\r\n    mulmod: function(a, b, c) {\r\n        return (a * b) % c;\r\n    },\r\n    range: function(len) {\r\n        var result = [];\r\n        for (var i = 0; i < len; i++) {\r\n            result.push(i);\r\n        }\r\n        return result;\r\n    }\r\n};\r\nfunction Beep(samplerate) {\r\n    if (!(this instanceof Beep)) return new Beep(samplerate);\r\n    if (typeof samplerate != \"number\" || samplerate < 1) return null;\r\n    this.channels = 1;\r\n    this.bitdepth = 16;\r\n    this.samplerate = samplerate;\r\n    this.sine = [];\r\n    var factor = (2 * Math.PI) / parseFloat(samplerate);\r\n    for (var n = 0; n < samplerate; n++) {\r\n        this.sine.push(Math.sin(n * factor));\r\n    }\r\n}\r\nBeep.prototype = {\r\n    generate: function(freqs) {\r\n        freqs = freqs instanceof Array ? freqs : [freqs];\r\n        var map = utils.bind(this, utils.map);\r\n        var periods = map(function(a) {\r\n            return utils.lcm(this.samplerate, a) / a; }, freqs);\r\n        var lcm = utils.foldl(utils.lcm, periods);\r\n        var sample = function(time) {\r\n            return function(freq) {\r\n                return this.sine[utils.mulmod(time, freq, this.samplerate)];\r\n            };\r\n        };\r\n        return map(function(t) { return utils.sum(map(sample(t), freqs)); },\r\n                   utils.range(lcm));\r\n    },\r\n    encode: function(freqs, duration, filters) {\r\n        freqs = freqs instanceof Array ? freqs : [freqs];\r\n        var transforms = utils.compose(\r\n            (filters || []).concat([utils.ushort]));\r\n        var samples = utils.map(transforms, this.generate(freqs));\r\n        var reps = Math.ceil(duration * this.samplerate / samples.length);\r\n        var fulldata = new Array(reps + 1).join(samples.join(\"\"));\r\n        var data = fulldata.substr(0, this.samplerate * duration * 2);\r\n        var fmtChunk = [\r\n            [\"f\", \"m\", \"t\", \" \"].join(\"\"),\r\n            utils.ulong(Beep.PCM_CHUNK_SIZE),\r\n            utils.ushort(Beep.LINEAR_QUANTIZATION),\r\n            utils.ushort(this.channels),\r\n            utils.ulong(this.samplerate),\r\n            utils.ulong(this.samplerate * this.channels * this.bitdepth / 8),\r\n            utils.ushort(this.bitdepth / 8),\r\n            utils.ushort(this.bitdepth)\r\n        ].join(\"\");\r\n        var dataChunk = [\r\n            [\"d\", \"a\", \"t\", \"a\"].join(\"\"),\r\n            utils.ulong(data.length * this.channels * this.bitdepth / 8),\r\n            data\r\n        ].join(\"\");\r\n        var header = [\r\n            [\"R\", \"I\", \"F\", \"F\"].join(\"\"),\r\n            utils.ulong(4 + (8 + fmtChunk.length) + (8 + dataChunk.length)),\r\n            [\"W\", \"A\", \"V\", \"E\"].join(\"\")\r\n        ].join(\"\");\r\n        return [header, fmtChunk, dataChunk].join(\"\");\r\n    },\r\n    play: function(freq, duration, filters, callback) {\r\n        filters = filters || [];\r\n        var data = btoa(this.encode(freq, duration, filters));\r\n        var audio = document.createElement(\"audio\");\r\n        audio.src = \"data:audio/x-wav;base64,\" + data;\r\n        audio.play();\r\n        if (typeof callback != 'undefined') {\r\n            audio.onended = callback;\r\n        }\r\n    }\r\n};\r\nBeep.LINEAR_QUANTIZATION = 1;\r\nBeep.PCM_CHUNK_SIZE = 16;\r\nBeep.utils = utils;\r\nns.Beep = Beep;\r\n})(window[window.NS_BEEP] || window);","    /**\r\n     * EDIT (XARTA): INITIAL FILEs / INSPIRATION FROM: https://jsfiddle.net/k313cwtx/4/\r\n     *\r\n     * @file This prototype can be used to create a reflector. The implementation\r\n     * can use two variants to create reflection:\r\n     * \r\n     * 1. Stencil Buffer: First, the logic renders the shape of the reflector to the\r\n     * stencil and color buffer. Then all reflected objects are drawn with activated\r\n     * stencil test and the rest of the stage is rendered normally. The invocation\r\n     * of the reflector's update method must always happen AFTER the invocation of\r\n     * the stage render method.\r\n     * \r\n     * see: Real-Time Rendering, Third Edition, Akenine-M�ller/Haines/Hoffman\r\n     * Chapter 9.3.1 Planar Reflections\r\n     * \r\n     * 2. Projective Texture Mapping: This variant renders the reflection into a\r\n     * texture. This map is then applied to the reflector via projective texture\r\n     * mapping. The invocation of the reflector's update method must always happen\r\n     * BEFORE the invocation of the stage render method.\r\n     * \r\n     * see: http://www.futurenation.net/glbase/reflect.htm\r\n     * \r\n     * When using this prototype, you must ensure that the autoClear property of\r\n     * renderer is set to false and the stage clears the buffer manually.\r\n     * \r\n     * @author Human Interactive\r\n     */\r\n\r\n    /*\"use strict\";\r\n\r\n    var THREE = require( \"three\" );*/\r\n\r\n    var ReflectorShader = {\r\n\r\n        uniforms : {\r\n\r\n            // this texture contains the reflection\r\n            \"reflectionMap\" : {\r\n                type : \"t\",\r\n                value : null\r\n            },\r\n            \r\n            // this matrix is used for projective texture mapping\r\n            \"textureMatrix\" : {\r\n                type : \"m4\",\r\n                value : null\r\n            }\r\n\r\n        },\r\n\r\n        vertexShader : [\r\n\r\n            \"uniform mat4 textureMatrix;\",\r\n        \r\n            \"varying vec4 vUv;\",\r\n        \r\n            \"void main() {\",\r\n        \r\n                // uv coordinates for texture projection\r\n                \"vUv = textureMatrix * vec4( position, 1.0 );\",\r\n        \r\n                \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n        \r\n            \"}\"\r\n\r\n        ].join( \"\\n\" ),\r\n\r\n        fragmentShader : [\r\n\r\n            \"uniform sampler2D reflectionMap;\",\r\n            \r\n            \"varying vec4 vUv;\",\r\n            \r\n            \"void main() {\",\r\n\r\n                \"gl_FragColor = texture2DProj( reflectionMap, vUv );\",\r\n            \r\n            \"}\"\r\n\r\n        ].join( \"\\n\" )\r\n    };\r\n    /**\r\n     * Creates a reflector.\r\n     * \r\n     * @constructor\r\n     * @augments THREE.Mesh\r\n     * \r\n     * @param {Renderer} renderer - The renderer object.\r\n     * @param {Camera} camera - The camera object.\r\n     * @param {World} world - The world object.\r\n     * @param {object} options - The options of the reflector.\r\n     */\r\n    function Reflector( renderer, camera, world, options ) {\r\n\r\n        THREE.Mesh.call( this );\r\n\r\n        Object.defineProperties( this, {\r\n\r\n            // the width of the reflector\r\n            width : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the height of the reflector\r\n            height : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // this value can be used to add a little offset to the normal of the\r\n            // reflection plane. it avoids render errors/ artifacts when working\r\n            // with the stencil buffer\r\n            offset : {\r\n                value : new THREE.Vector3(),\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // this value can be used to tweak the clipping if projective texture\r\n            // mapping is used\r\n            clipBias : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // approximate resolution value of the render target\r\n            resolution : {\r\n                value : 2048,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // controls the type of reflector algorithm\r\n            useStencilBuffer : {\r\n                value : false,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // a reference to the renderer object\r\n            _renderer : {\r\n                value : renderer,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // a reference to the camera object\r\n            _camera : {\r\n                value : camera,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // a reference to the world object\r\n            _world : {\r\n                value : world,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // the reflection plane of the reflector. this plane will be used to build\r\n            // the reflection matrix\r\n            _reflectionPlane : {\r\n                value : new THREE.Plane(),\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // this will be used to transform the virtual camera to the correct\r\n            // viewpoint of the reflector\r\n            _reflectionMatrix : {\r\n                value : new THREE.Matrix4(),\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // the virtual camera. it represents the actual view of the reflector\r\n            _reflectorCamera : {\r\n                value : new THREE.PerspectiveCamera(),\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // this special scene holds only the reflector for rendering to the\r\n            // stencil buffer. three.js render method can't render single objects,\r\n            // but just scenes\r\n            _sceneReflector : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            },\r\n            // this texture contains the reflection of the reflector\r\n            _reflectionMap : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            },\r\n            // this matrix is used to generate uv coordinates in the shader to map\r\n            // the texture to the reflector's surface\r\n            _textureMatrix : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            },\r\n            // this helper object visualizes the position of the virtual camera\r\n            _cameraHelper : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            },\r\n            // this helper shows the view direction of the reflector's camera\r\n            _directionHelper : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            }\r\n        } );\r\n        \r\n        // transfer the options values to the object\r\n        for ( var property in options )\r\n        {\r\n            if ( options.hasOwnProperty( property ) )\r\n            {\r\n                this[ property ] = options[ property ];\r\n            }\r\n        }\r\n\r\n        this._init();\r\n    }\r\n\r\n    Reflector.prototype = Object.create( THREE.Mesh.prototype );\r\n    Reflector.prototype.constructor = Reflector;\r\n\r\n    /**\r\n     * Update method of the reflector.\r\n     */\r\n    Reflector.prototype.update = function() {\r\n        \r\n        this._beforeRender();\r\n\r\n        this._render();\r\n        \r\n        this._afterRender();\r\n    };\r\n\r\n    /**\r\n     * This overrides the standard three.js method. If this method is called, we\r\n     * also want to update the reflection entities.\r\n     */\r\n    Reflector.prototype.updateMatrix = function() {\r\n\r\n        THREE.Mesh.prototype.updateMatrix.call( this );\r\n\r\n        this.makeReflectionPlane();\r\n\r\n        this.makeReflectionMatrix();\r\n    };\r\n\r\n    /**\r\n     * Creates the reflection plane of the reflector.\r\n     */\r\n    Reflector.prototype.makeReflectionPlane = ( function() {\r\n\r\n        var normal, position, quaternion, scale;\r\n\r\n        return function() {\r\n\r\n            if ( normal === undefined )\r\n            {\r\n                normal = new THREE.Vector3();\r\n                position = new THREE.Vector3();\r\n                quaternion = new THREE.Quaternion();\r\n                scale = new THREE.Vector3();\r\n            }\r\n            \r\n            // ensure matrixWorld is up to date\r\n            this.updateMatrixWorld( true );\r\n            \r\n            // then extract position and orientation \r\n            this.matrixWorld.decompose( position, quaternion, scale );\r\n            \r\n            // get the normal of the reflector/plane\r\n            normal.set( 0, 0, 1 ).applyQuaternion( quaternion ).normalize();\r\n            \r\n            // optional: tweak the normal to avoid render artifacts ( stencil buffer )\r\n            normal.add( this.offset ).normalize();\r\n\r\n            // calculate reflection plane\r\n            this._reflectionPlane.setFromNormalAndCoplanarPoint( normal, position );\r\n        };\r\n\r\n    }() );\r\n\r\n    /**\r\n     * Creates the reflection matrix of the reflector.\r\n     * \r\n     * see: 3D Math Primer for Graphics and Game Development (Second Edition),\r\n     * Chapter 5.4 Reflection, 3D matrix to reflect about an arbitrary plane\r\n     */\r\n    Reflector.prototype.makeReflectionMatrix = function() {\r\n\r\n        // construct reflection matrix from reflection plane\r\n\r\n        this._reflectionMatrix.elements[ 0 ] = -2 * this._reflectionPlane.normal.x * this._reflectionPlane.normal.x + 1;\r\n        this._reflectionMatrix.elements[ 1 ] = -2 * this._reflectionPlane.normal.y * this._reflectionPlane.normal.x;\r\n        this._reflectionMatrix.elements[ 2 ] = -2 * this._reflectionPlane.normal.z * this._reflectionPlane.normal.x;\r\n        this._reflectionMatrix.elements[ 3 ] = 0;\r\n\r\n        this._reflectionMatrix.elements[ 4 ] = -2 * this._reflectionPlane.normal.x * this._reflectionPlane.normal.y;\r\n        this._reflectionMatrix.elements[ 5 ] = -2 * this._reflectionPlane.normal.y * this._reflectionPlane.normal.y + 1;\r\n        this._reflectionMatrix.elements[ 6 ] = -2 * this._reflectionPlane.normal.z * this._reflectionPlane.normal.y;\r\n        this._reflectionMatrix.elements[ 7 ] = 0;\r\n\r\n        this._reflectionMatrix.elements[ 8 ] = -2 * this._reflectionPlane.normal.x * this._reflectionPlane.normal.z;\r\n        this._reflectionMatrix.elements[ 9 ] = -2 * this._reflectionPlane.normal.y * this._reflectionPlane.normal.z;\r\n        this._reflectionMatrix.elements[ 10 ] = -2 * this._reflectionPlane.normal.z * this._reflectionPlane.normal.z + 1;\r\n        this._reflectionMatrix.elements[ 11 ] = 0;\r\n\r\n        this._reflectionMatrix.elements[ 12 ] = -2 * this._reflectionPlane.normal.x * this._reflectionPlane.constant;\r\n        this._reflectionMatrix.elements[ 13 ] = -2 * this._reflectionPlane.normal.y * this._reflectionPlane.constant;\r\n        this._reflectionMatrix.elements[ 14 ] = -2 * this._reflectionPlane.normal.z * this._reflectionPlane.constant;\r\n        this._reflectionMatrix.elements[ 15 ] = 1;\r\n    };\r\n\r\n    /**\r\n     * Initializes the reflector.\r\n     */\r\n    Reflector.prototype._init = function() {\r\n        \r\n        // geometry of the reflector\r\n        this.geometry = new THREE.PlaneBufferGeometry( this.width, this.height, 1, 1 );\r\n        \r\n        // no auto-update for virtual camera\r\n        this._reflectorCamera.matrixAutoUpdate = false;\r\n        \r\n        // no auto-update for reflector itself \r\n        this.matrixAutoUpdate = false;\r\n\r\n        // check the usage of the stencil buffer. if set to true, we don't render the reflection to\r\n        // a texture but directly to the world\r\n        if ( this.useStencilBuffer === true )\r\n        {\r\n            // when we don't use a render target, we must ensure that the reflector\r\n            // itself is not written to the depth buffer. otherwise we won't see\r\n            // objects \"inside\" the reflector\r\n            this.material = new THREE.MeshBasicMaterial( {\r\n                color : this._renderer.getClearColor(),\r\n                depthWrite : false\r\n            } );\r\n\r\n            // we need to store the reflector in a separate scene for rendering to\r\n            // the stencil buffer\r\n            this._sceneReflector = new THREE.Scene();\r\n            this._sceneReflector.add( this );\r\n        }\r\n        else\r\n        {\r\n            // custom shader material\r\n            this.material = new THREE.ShaderMaterial( {\r\n                uniforms : THREE.UniformsUtils.clone( ReflectorShader.uniforms ),\r\n                vertexShader : ReflectorShader.vertexShader,\r\n                fragmentShader : ReflectorShader.fragmentShader\r\n            } );\r\n\r\n            // create a render target for the reflection texture\r\n            this._createRenderTarget();\r\n\r\n            // create texture matrix\r\n            this._textureMatrix = new THREE.Matrix4();\r\n\r\n            // assign uniform data\r\n            this.material.uniforms.reflectionMap.value = this._reflectionMap.texture;\r\n            this.material.uniforms.textureMatrix.value = this._textureMatrix;\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Render method of the reflector.\r\n     */\r\n    Reflector.prototype._render = function() {\r\n\r\n        if ( this.useStencilBuffer === true )\r\n        {\r\n            // draw all reflected objects to the framebuffer\r\n            this._renderer.render( this._world.scene, this._reflectorCamera );\r\n        }\r\n        else\r\n        {\r\n            // draw all reflected objects into the render target\r\n            this._renderer.render( this._world.scene, this._reflectorCamera, this._reflectionMap, true );\t\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * This method is called before rendering.\r\n     */\r\n    Reflector.prototype._beforeRender = function() {\r\n\r\n        this._updateCamera();\r\n\r\n        if ( this.useStencilBuffer === true )\r\n        {\r\n            this._updateStencilBuffer();\r\n        }\r\n        else\r\n        {\r\n            this._updateTextureMatrix();\r\n\r\n            this._updateClipping();\r\n            \r\n            // the reflector should not render itself\r\n            this.material.visible = false;\r\n        }\r\n\r\n        // update culling of faces\r\n        this._updateCulling();\r\n\r\n    };\r\n\r\n    /**\r\n     * This method is called after rendering.\r\n     */\r\n    Reflector.prototype._afterRender = function() {\r\n\r\n        var gl = this._renderer.context;\r\n        var glState = this._renderer.state;\r\n\r\n        if ( this.useStencilBuffer === true )\r\n        {\r\n            // disable stencil test\r\n            glState.disable( gl.STENCIL_TEST );\r\n        }\r\n        else\r\n        {\r\n            this.material.visible = true;\r\n        }\r\n\r\n        this._updateCulling();\r\n    };\r\n\r\n    /**\r\n     * This will update the stencil buffer. It ensures that the viewer sees\r\n     * reflected objects only inside the reflector. So it's just a special form of\r\n     * clipping.\r\n     */\r\n    Reflector.prototype._updateStencilBuffer = function() {\r\n\r\n        var gl = this._renderer.context;\r\n        var glState = this._renderer.state;\r\n\r\n        // enable stencil test\r\n        glState.enable( gl.STENCIL_TEST );\r\n        gl.stencilFunc( gl.ALWAYS, 1, 0xff );\r\n        gl.stencilOp( gl.REPLACE, gl.KEEP, gl.REPLACE );\r\n\r\n        // draw reflector to stencil buffer\r\n        this._renderer.render( this._sceneReflector, this._camera );\r\n\r\n        // change stencil function and operation for testing\r\n        gl.stencilFunc( gl.EQUAL, 1, 0xff );\r\n        gl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );\r\n    };\r\n\r\n    /**\r\n     * This will update the virtual camera to the correct view position and\r\n     * orientation.\r\n     */\r\n    Reflector.prototype._updateCamera = function() {\r\n\r\n        // we use our reflection matrix to flip the position and orientation of our\r\n        // virtual camera\r\n        this._reflectorCamera.matrix.copy( this._reflectionMatrix ).multiply( this._camera.matrixWorld );\r\n\r\n        // update matrices\r\n        this._reflectorCamera.updateMatrixWorld( true );\r\n        this._reflectorCamera.projectionMatrix.copy( this._camera.projectionMatrix );\r\n\r\n        // this is only necessary if we render to a texture\r\n        if ( this.useStencilBuffer === false )\r\n        {\r\n            this._reflectorCamera.matrixWorldInverse.getInverse( this._reflectorCamera.matrixWorld );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Updates helper objects.\r\n     */\r\n    Reflector.prototype._updateHelpers = function() {\r\n\r\n        this._cameraHelper.position.setFromMatrixPosition( this._reflectorCamera.matrix );\r\n        this._directionHelper.setDirection( this._reflectorCamera.getWorldDirection() );\r\n    };\r\n\r\n    /**\r\n     * Adds 3D helper objects for debugging.\r\n     */\r\n    Reflector.prototype._addHelpers = function() {\r\n\r\n        var helperGeometry = new THREE.BoxGeometry( 2, 2, 2 );\r\n        var helperMaterial = new THREE.MeshBasicMaterial( {\r\n            color : 0xffffff\r\n        } );\r\n\r\n        // create a simple mesh to visualize the position of the reflector camera\r\n        this._cameraHelper = new THREE.Mesh( helperGeometry, helperMaterial );\r\n\r\n        // create a arrow to visualize the orientation of the reflector camera\r\n        this._directionHelper = new THREE.ArrowHelper( this._cameraHelper.getWorldDirection(), new THREE.Vector3(), 10 );\r\n\r\n        // add helpers to world\r\n        this._cameraHelper.add( this._directionHelper );\r\n        this._world.addObject3D( this._cameraHelper );\r\n    };\r\n\r\n    /**\r\n     * This method controls the culling mode of objects. Because reflection reverses\r\n     * the winding order, it is necessary to switch the culling mode for each\r\n     * object.\r\n     */\r\n    Reflector.prototype._updateCulling = function() {\r\n\r\n        var index, self;\r\n        \r\n        self = this;\r\n\r\n        this._world.scene.traverseVisible( function( object ) {\r\n\r\n            if ( object.material !== undefined )\r\n            {\r\n                // multi materials have an array of materials\r\n                if ( object.material instanceof THREE.MultiMaterial )\r\n                {\r\n                    for ( index = 0; index < object.material.materials.length; index++ )\r\n                    {\r\n                        self._flipFaceCulling( object.material.materials[ index ] );\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    self._flipFaceCulling( object.material );\r\n                }\r\n\r\n            }\r\n            \r\n        } );\r\n    };\r\n\r\n    /**\r\n     * This method changes between front and back face culling.\r\n     * \r\n     * @param {THREE.Material} material - The material object.\r\n     */\r\n    Reflector.prototype._flipFaceCulling = function( material ) {\r\n\r\n        if ( material.side !== THREE.DoubleSide )\r\n        {\r\n            material.side = ( material.side === THREE.FrontSide ) ? THREE.BackSide : THREE.FrontSide;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates the render target that is used to rendering the reflection into a\r\n     * texture.\r\n     */\r\n    Reflector.prototype._createRenderTarget = function() {\r\n\r\n        var resolution = new THREE.Vector2();\r\n        var parameter = {\r\n            format : THREE.RGBFormat,\r\n            stencilBuffer : false\r\n        };\r\n\r\n        // we check the ratio of the dimensions and calculate an appropriate\r\n        // resolution\r\n        if ( this.width > this.height )\r\n        {\r\n            resolution.x = this.resolution;\r\n            resolution.y = Math.floor( this.resolution * ( this.height / this.width ) );\r\n\r\n        }\r\n        else\r\n        {\r\n            resolution.x = Math.floor( this.resolution * ( this.width / this.height ) );\r\n            resolution.y = this.resolution;\r\n        }\r\n\r\n        // create the render target\r\n        this._reflectionMap = new THREE.WebGLRenderTarget( resolution.x, resolution.y, parameter );\r\n    };\r\n\r\n    /**\r\n     * This will update the texture matrix that is used for projective texture\r\n     * mapping in the shader.\r\n     * \r\n     * see: http://developer.download.nvidia.com/assets/gamedev/docs/projective_texture_mapping.pdf\r\n     */\r\n    Reflector.prototype._updateTextureMatrix = function() {\r\n\r\n        // this matrix does range mapping to [ 0, 1 ]\r\n        this._textureMatrix.set( 0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0 );\r\n\r\n        // we use \"Object Linear Texgen\", so we need to multiply the texture matrix T\r\n        // (matrix above) with the projection and view matrix of the virtual camera\r\n        // and the model matrix of the 3D object (the reflector)\r\n        this._textureMatrix.multiply( this._reflectorCamera.projectionMatrix );\r\n        this._textureMatrix.multiply( this._reflectorCamera.matrixWorldInverse );\r\n        this._textureMatrix.multiply( this.matrixWorld );\r\n    };\r\n\r\n    /**\r\n     * This method creates an oblique view frustum for clipping.\r\n     * \r\n     * see: Lengyel, Eric. �Oblique View Frustum Depth Projection and Clipping�.\r\n     * Journal of Game Development, Vol. 1, No. 2 (2005), Charles River Media, pp.\r\n     * 5�16.\r\n     */\r\n    Reflector.prototype._updateClipping = ( function() {\r\n\r\n        var clipPlane, clipVector, q;\r\n\r\n        return function() {\r\n\r\n            // shortcut\r\n            var projectionMatrix = this._reflectorCamera.projectionMatrix;\r\n\r\n            if ( clipPlane === undefined )\r\n            {\r\n                clipPlane = new THREE.Plane();\r\n                clipVector = new THREE.Vector4();\r\n                q = new THREE.Vector4();\r\n            }\r\n\r\n            // copy the reflection plane and apply the inverse world matrix of the\r\n            // reflector camera\r\n            clipPlane.copy( this._reflectionPlane );\r\n            clipPlane.applyMatrix4( this._reflectorCamera.matrixWorldInverse );\r\n\r\n            // we transfer the information of our plane to a four component vector\r\n            clipVector.set( clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant );\r\n\r\n            // calculate the clip-space corner point opposite the clipping plane and\r\n            // transform it into camera space by multiplying it by the inverse of\r\n            // the projection matrix\r\n            q.x = ( Math.sign( clipVector.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\r\n            q.y = ( Math.sign( clipVector.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\r\n            q.z = - 1.0;\r\n            q.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\r\n\r\n            // calculate the scaled plane vector\r\n            clipVector.multiplyScalar( 2.0 / clipVector.dot( q ) );\r\n\r\n            // replacing the third row of the projection matrix\r\n            projectionMatrix.elements[ 2 ] = clipVector.x;\r\n            projectionMatrix.elements[ 6 ] = clipVector.y;\r\n            projectionMatrix.elements[ 10 ] = clipVector.z + 1.0 - this.clipBias;\r\n            projectionMatrix.elements[ 14 ] = clipVector.w;\r\n        };\r\n\r\n    }() );\r\n\r\n    /*module.exports = Reflector;\r\n    module.exports = Reflector;*/\r\n    /**\r\n     * @file This prototype can be used to create a refractor. The logic renders\r\n     * everything behind a clipping plane into a texture. The associated shader\r\n     * program can implement different effects like distortions. Compared with the\r\n     * reflector this prototype provides just one type of rendering.\r\n     * \r\n     * 1. Projective Texture Mapping: This variant renders the refraction into a\r\n     * texture map. This map is then applied to the refractor via projective texture\r\n     * mapping. The invocation of the refractor's update method must always happen\r\n     * BEFORE the invocation of the stage render method.\r\n     * \r\n     * @author Human Interactive\r\n     */\r\n\r\n    /*\"use strict\";\r\n\r\n    var THREE = require( \"three\" );\r\n\r\n    var RefractorShader = require( \"../shader/RefractorShader\" );*/\r\n    var RefractorShader = {\r\n\r\n        uniforms : {\r\n\r\n            // this texture contains the refraction\r\n            \"refractionMap\" : {\r\n                type : \"t\",\r\n                value : null\r\n            },\r\n            \r\n            // this matrix is used for projective texture mapping\r\n            \"textureMatrix\" : {\r\n                type : \"m4\",\r\n                value : null\r\n            }\r\n\r\n        },\r\n\r\n        vertexShader : [\r\n\r\n            \"uniform mat4 textureMatrix;\",\r\n        \r\n            \"varying vec4 vUv;\",\r\n        \r\n            \"void main() {\",\r\n        \r\n                // uv coordinates for texture projection\r\n                \"vUv = textureMatrix * vec4( position, 1.0 );\",\r\n        \r\n                \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n        \r\n            \"}\"\r\n\r\n        ].join( \"\\n\" ),\r\n\r\n        fragmentShader : [\r\n\r\n            \"uniform sampler2D refractionMap;\",\r\n            \r\n            \"varying vec4 vUv;\",\r\n            \r\n            \"void main() {\",\r\n\r\n                \"gl_FragColor = texture2DProj( refractionMap, vUv );\",\r\n            \r\n            \"}\"\r\n\r\n        ].join( \"\\n\" )\r\n    };\r\n    /**\r\n     * Creates a refractor.\r\n     * \r\n     * @constructor\r\n     * @augments THREE.Mesh\r\n     * \r\n     * @param {Renderer} renderer - The renderer object.\r\n     * @param {Camera} camera - The camera object.\r\n     * @param {World} world - The world object.\r\n     * @param {object} options - The options of the refractor.\r\n     */\r\n    function Refractor( renderer, camera, world, options ) {\r\n\r\n        THREE.Mesh.call( this );\r\n\r\n        Object.defineProperties( this, {\r\n\r\n            // the width of the refractor\r\n            width : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the height of the refractor\r\n            height : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // this value can be used to tweak the clipping\r\n            clipBias : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // approximate resolution value of the render target\r\n            resolution : {\r\n                value : 2048,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // a reference to the renderer object\r\n            _renderer : {\r\n                value : renderer,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // a reference to the camera object\r\n            _camera : {\r\n                value : camera,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // a reference to the world object\r\n            _world : {\r\n                value : world,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // this will be used as a clipping plane\r\n            _refractionPlane : {\r\n                value : new THREE.Plane(),\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // the virtual camera. it represents the actual view of the refractor\r\n            _refractorCamera : {\r\n                value : new THREE.PerspectiveCamera(),\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // this texture contains the refraction\r\n            _refractionMap : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            },\r\n            // this matrix is used to generate uv coordinates in the shader to map\r\n            // the texture to the refractor's surface\r\n            _textureMatrix : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            }\r\n        } );\r\n        \r\n        // transfer the options values to the object\r\n        for ( var property in options )\r\n        {\r\n            if ( options.hasOwnProperty( property ) )\r\n            {\r\n                this[ property ] = options[ property ];\r\n            }\r\n        }\r\n\r\n        this._init();\r\n    }\r\n\r\n    Refractor.prototype = Object.create( THREE.Mesh.prototype );\r\n    Refractor.prototype.constructor = Refractor;\r\n\r\n    /**\r\n     * Update method of the refractor.\r\n     */\r\n    Refractor.prototype.update = function() {\r\n        \r\n        this._beforeRender();\r\n\r\n        this._render();\r\n        \r\n        this._afterRender();\r\n    };\r\n\r\n    /**\r\n     * This overrides the standard three.js method. If this method is called, we\r\n     * also want to update the refraction plane.\r\n     */\r\n    Refractor.prototype.updateMatrix = function() {\r\n\r\n        THREE.Mesh.prototype.updateMatrix.call( this );\r\n\r\n        this.makeRefractionPlane();\r\n    };\r\n\r\n    /**\r\n     * Creates the clipping plane of the refractor.\r\n     */\r\n    Refractor.prototype.makeRefractionPlane = ( function() {\r\n\r\n        var normal, position, quaternion, scale;\r\n\r\n        return function() {\r\n\r\n            if ( normal === undefined )\r\n            {\r\n                normal = new THREE.Vector3();\r\n                position = new THREE.Vector3();\r\n                quaternion = new THREE.Quaternion();\r\n                scale = new THREE.Vector3();\r\n            }\r\n            \r\n            // ensure matrixWorld is up to date\r\n            this.updateMatrixWorld( true );\r\n            \r\n            // then extract position and orientation \r\n            this.matrixWorld.decompose( position, quaternion, scale );\r\n            \r\n            // get the normal of the refractor plane\r\n            normal.set( 0, 0, 1 ).applyQuaternion( quaternion ).normalize();\r\n            \r\n            // flip the normal, because we want to cull everything above the plane\r\n            normal.negate();\r\n            \r\n            // calculate refractor plane\r\n            this._refractionPlane.setFromNormalAndCoplanarPoint( normal, position );\r\n        };\r\n\r\n    }() );\r\n\r\n    /**\r\n     * Initializes the refractor.\r\n     */\r\n    Refractor.prototype._init = function() {\r\n        \r\n        // geometry of the refractor\r\n        this.geometry = new THREE.PlaneBufferGeometry( this.width, this.height, 1, 1 );\r\n\r\n        // custom shader material\r\n        this.material = new THREE.ShaderMaterial( {\r\n            uniforms : THREE.UniformsUtils.clone( RefractorShader.uniforms ),\r\n            vertexShader : RefractorShader.vertexShader,\r\n            fragmentShader : RefractorShader.fragmentShader\r\n        } );\r\n            \r\n        // create a render target for the refraction texture\r\n        this._createRenderTarget();\r\n        \r\n        // create texture matrix\r\n        this._textureMatrix = new THREE.Matrix4();\r\n        \r\n        // assign uniform data\r\n        this.material.uniforms.refractionMap.value = this._refractionMap.texture;\r\n        this.material.uniforms.textureMatrix.value = this._textureMatrix;\r\n        \r\n        // no auto-update for virtual camera\r\n        this._refractorCamera.matrixAutoUpdate = false;\r\n        \r\n        // no auto-update for refractor itself \r\n        this.matrixAutoUpdate = false;\r\n    };\r\n\r\n    /**\r\n     * Render method of the refractor.\r\n     */\r\n    Refractor.prototype._render = function() {\r\n        \r\n        this._renderer.render( this._world.scene, this._refractorCamera, this._refractionMap, true );\r\n    };\r\n\r\n    /**\r\n     * This method is called before rendering.\r\n     */\r\n    Refractor.prototype._beforeRender = function() {\r\n        \r\n        // the refractor should not render itself\r\n        this.material.visible = false;\r\n\r\n        this._updateCamera();\r\n        \r\n        this._updateTextureMatrix();\r\n        \r\n        this._updateClipping();\r\n    };\r\n\r\n    /**\r\n     * This method is called after rendering.\r\n     */\r\n    Refractor.prototype._afterRender = function() {\r\n\r\n        this.material.visible = true;\r\n    };\r\n\r\n\r\n    /**\r\n     * This will update the virtual camera to the correct view position and\r\n     * orientation.\r\n     */\r\n    Refractor.prototype._updateCamera = function() {\r\n\r\n        // we just copy the values of our camera to the virtual camera of the refractor\r\n        this._refractorCamera.matrix.copy( this._camera.matrixWorld );\r\n        this._refractorCamera.updateMatrixWorld( true );\r\n        this._refractorCamera.projectionMatrix.copy( this._camera.projectionMatrix );\r\n        this._refractorCamera.matrixWorldInverse.getInverse( this._refractorCamera.matrixWorld );\r\n    };\r\n\r\n    /**\r\n     * Creates the render target that is used to rendering the refraction into a\r\n     * texture.\r\n     */\r\n    Refractor.prototype._createRenderTarget = function() {\r\n\r\n        var resolution = new THREE.Vector2();\r\n        var parameter = {\r\n            format : THREE.RGBFormat,\r\n            stencilBuffer : false\r\n        };\r\n\r\n        // we check the ratio of the dimensions and calculate an appropriate\r\n        // resolution\r\n        if ( this.width > this.height )\r\n        {\r\n            resolution.x = this.resolution;\r\n            resolution.y = Math.floor( this.resolution * ( this.height / this.width ) );\r\n\r\n        }\r\n        else\r\n        {\r\n            resolution.x = Math.floor( this.resolution * ( this.width / this.height ) );\r\n            resolution.y = this.resolution;\r\n        }\r\n\r\n        // create the render target\r\n        this._refractionMap = new THREE.WebGLRenderTarget( resolution.x, resolution.y, parameter );\r\n    };\r\n\r\n    /**\r\n     * This will update the texture matrix that is used for projective texture\r\n     * mapping in the shader.\r\n     * \r\n     * see: http://developer.download.nvidia.com/assets/gamedev/docs/projective_texture_mapping.pdf\r\n     */\r\n    Refractor.prototype._updateTextureMatrix = function() {\r\n\r\n        // this matrix does range mapping to [ 0, 1 ]\r\n        this._textureMatrix.set( 0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0 );\r\n\r\n        // we use \"Object Linear Texgen\", so we need to multiply the texture matrix T\r\n        // (matrix above) with the projection and view matrix of the virtual camera\r\n        // and the model matrix of the 3D object (the refractor)\r\n        this._textureMatrix.multiply( this._refractorCamera.projectionMatrix );\r\n        this._textureMatrix.multiply( this._refractorCamera.matrixWorldInverse );\r\n        this._textureMatrix.multiply( this.matrixWorld );\r\n    };\r\n\r\n    /**\r\n     * This method creates an oblique view frustum for clipping.\r\n     * \r\n     * see: Lengyel, Eric. �Oblique View Frustum Depth Projection and Clipping�.\r\n     * Journal of Game Development, Vol. 1, No. 2 (2005), Charles River Media, pp.\r\n     * 5�16.\r\n     */\r\n    Refractor.prototype._updateClipping = ( function() {\r\n\r\n        var clipPlane, clipVector, q;\r\n\r\n        return function() {\r\n\r\n            // shortcut\r\n            var projectionMatrix = this._refractorCamera.projectionMatrix;\r\n\r\n            if ( clipPlane === undefined )\r\n            {\r\n                clipPlane = new THREE.Plane();\r\n                clipVector = new THREE.Vector4();\r\n                q = new THREE.Vector4();\r\n            }\r\n\r\n            // copy the reflection plane and apply the inverse world matrix of the\r\n            // refractor camera\r\n            clipPlane.copy( this._refractionPlane );\r\n            clipPlane.applyMatrix4( this._refractorCamera.matrixWorldInverse );\r\n\r\n            // we transfer the information of our plane to a four component vector\r\n            clipVector.set( clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant );\r\n\r\n            // calculate the clip-space corner point opposite the clipping plane and\r\n            // transform it into camera space by multiplying it by the inverse of\r\n            // the projection matrix\r\n            q.x = ( Math.sign( clipVector.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\r\n            q.y = ( Math.sign( clipVector.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\r\n            q.z = - 1.0;\r\n            q.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\r\n\r\n            // calculate the scaled plane vector\r\n            clipVector.multiplyScalar( 2.0 / clipVector.dot( q ) );\r\n\r\n            // replacing the third row of the projection matrix\r\n            projectionMatrix.elements[ 2 ] = clipVector.x;\r\n            projectionMatrix.elements[ 6 ] = clipVector.y;\r\n            projectionMatrix.elements[ 10 ] = clipVector.z + 1.0 - this.clipBias;\r\n            projectionMatrix.elements[ 14 ] = clipVector.w;\r\n        };\r\n\r\n    }() );\r\n    /*\r\n    module.exports = Refractor;*/\r\n    /**\r\n     * @file This shader is used as a material for a water mesh.\r\n     *\r\n     * @author Human Interactive\r\n     */\r\n\r\n    // \"use strict\";\r\n\r\n    // var THREE = require( \"three\" );\r\n\r\n    // module.exports\r\n    var WaterShader = {\r\n\r\n        uniforms : {\r\n\r\n            // this texture contains the reflection of the water\r\n            \"reflectionMap\" : {\r\n                type : \"t\",\r\n                value : null\r\n            },\r\n\r\n            // this texture contains the refraction of the water\r\n            \"refractionMap\" : {\r\n                type : \"t\",\r\n                value : null\r\n            },\r\n\r\n            // this texture contains the flow of the water\r\n            \"flowMap\" : {\r\n                type : \"t\",\r\n                value : null\r\n            },\r\n\r\n            // this texture is used to create a more realistic water flow\r\n            \"noiseMap\" : {\r\n                type : \"t\",\r\n                value : null\r\n            },\r\n\r\n            // this texture will be used to retrieve normals\r\n            \"normalMap0\" : {\r\n                type : \"t\",\r\n                value : null\r\n            },\r\n\r\n            // this texture will be used to retrieve normals\r\n            \"normalMap1\" : {\r\n                type : \"t\",\r\n                value : null\r\n            },\r\n\r\n            // this matrix is used for projective texture mapping\r\n            \"textureMatrixReflection\" : {\r\n                type : \"m4\",\r\n                value : null\r\n            },\r\n\r\n            // this matrix is used for projective texture mapping\r\n            \"textureMatrixRefraction\" : {\r\n                type : \"m4\",\r\n                value : null\r\n            },\r\n\r\n            // first offset of the flowmap\r\n            \"flowMapOffset0\" : {\r\n                type : \"f\",\r\n                value : 0\r\n            },\r\n\r\n            // second offset of the flowmap\r\n            \"flowMapOffset1\" : {\r\n                type : \"f\",\r\n                value : 0\r\n            },\r\n\r\n            // color of the water\r\n            \"waterColor\" : {\r\n                type : \"c\",\r\n                value : null\r\n            },\r\n\r\n            // the reflectivity of the water\r\n            \"waterReflectivity\" : {\r\n                type : \"f\",\r\n                value : 0.02\r\n            },\r\n\r\n            // the direction of the light\r\n            \"lightDirection\" : {\r\n                type : \"v3\",\r\n                value : null\r\n            },\r\n\r\n            // the color of the light\r\n            \"lightColor\" : {\r\n                type : \"c\",\r\n                value : null\r\n            },\r\n\r\n            // the shininess of the water\r\n            \"shininess\" : {\r\n                type : \"f\",\r\n                value : 20.0\r\n            },\r\n\r\n            // the segments of the water\r\n            \"segments\" : {\r\n                type : \"f\",\r\n                value : 1.0\r\n            },\r\n\r\n            // half cycle of a flow map phase\r\n            \"halfCycle\" : {\r\n                type : \"f\",\r\n                value : 0.0\r\n            }\r\n\r\n        },\r\n\r\n        vertexShader : [\r\n\r\n            \"uniform mat4 textureMatrixReflection;\",\r\n            \"uniform mat4 textureMatrixRefraction;\",\r\n\r\n            \"uniform float segments;\",\r\n\r\n            \"varying vec4 vUvReflect;\",\r\n            \"varying vec4 vUvRefract;\",\r\n            \"varying vec3 vToEye;\",\r\n            \"varying vec2 vUv;\",\r\n            \"varying float vTexScale;\",\r\n\r\n            \"void main() {\",\r\n\r\n                \"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\r\n\r\n                // default uv coordinates\r\n                \"vUv = uv;\",\r\n\r\n                // used for scaling of normal maps\r\n                \"vTexScale = segments;\",\r\n\r\n                // uv coordinates for texture projection\r\n                \"vUvReflect = textureMatrixReflection * vec4( position, 1.0 );\",\r\n                \"vUvRefract = textureMatrixRefraction * vec4( position, 1.0 );\",\r\n\r\n                // calculate toEye vector\r\n                \"vToEye = cameraPosition - worldPosition.xyz;\",\r\n\r\n                \"gl_Position = projectionMatrix * viewMatrix * worldPosition;\",\r\n\r\n            \"}\"\r\n\r\n        ].join( \"\\n\" ),\r\n\r\n        fragmentShader : [\r\n\r\n            \"uniform sampler2D reflectionMap;\",\r\n            \"uniform sampler2D refractionMap;\",\r\n            \"uniform sampler2D flowMap;\",\r\n            \"uniform sampler2D noiseMap;\",\r\n            \"uniform sampler2D normalMap0;\",\r\n            \"uniform sampler2D normalMap1;\",\r\n\r\n            \"uniform vec3 lightDirection;\",\r\n            \"uniform vec3 lightColor;\",\r\n            \"uniform vec3 waterColor;\",\r\n\r\n            \"uniform float flowMapOffset0;\",\r\n            \"uniform float flowMapOffset1;\",\r\n            \"uniform float waterReflectivity;\",\r\n            \"uniform float shininess;\",\r\n            \"uniform float halfCycle;\",\r\n\r\n            \"varying vec4 vUvReflect;\",\r\n            \"varying vec4 vUvRefract;\",\r\n            \"varying vec3 vToEye;\",\r\n            \"varying vec2 vUv;\",\r\n            \"varying float vTexScale;\",\r\n\r\n            \"void main() {\",\r\n\r\n                \"vec3 toEye = normalize( vToEye );\",\r\n\r\n                // sample flow map\r\n                \"vec2 flow = texture2D( flowMap, vUv ).rg * 2.0 - 1.0;\",\r\n                \"flow.r *= -1.0;\",\r\n\r\n                // sample noise map\r\n                \"float cycleOffset = texture2D( noiseMap, vUv ).r;\",\r\n\r\n                // calculate current phases\r\n                \"float phase0 = cycleOffset * 0.5 + flowMapOffset0;\",\r\n                \"float phase1 = cycleOffset * 0.5 + flowMapOffset1;\",\r\n\r\n                // sample normal maps\r\n                \"vec4 normalColor0 = texture2D( normalMap0, ( vUv * vTexScale ) + flow * phase0 );\",\r\n                \"vec4 normalColor1 = texture2D( normalMap1, ( vUv * vTexScale ) + flow * phase1 );\",\r\n\r\n                // linear interpolate to get the final normal color\r\n                \"float flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\",\r\n                \"vec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\",\r\n\r\n                // determine the normal vector\r\n                \"vec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\",\r\n\r\n                // fresnel effect\r\n                \"float theta = max( dot( toEye, normal ), 0.0 );\",\r\n                \"float reflectance = waterReflectivity + ( 1.0 - waterReflectivity ) * pow( ( 1.0 - theta ), 5.0 );\",\r\n\r\n                // light calculation\r\n                \"vec3 reflectedLight = normalize( reflect( -lightDirection, normal ) );\",\r\n                \"float specular = pow( max( dot( reflectedLight, toEye ), 0.0 ) , shininess );\",\r\n                \"vec4 specularColor =  vec4( lightColor * specular, 0.0 );\",\r\n\r\n                // sample textures\r\n                \"vec3 uvReflect = vUvReflect.xyz / vUvReflect.w;\",\r\n                \"vec3 uvRefract = vUvRefract.xyz / vUvRefract.w;\",\r\n\r\n                \"vec4 reflectColor = texture2D( reflectionMap, uvReflect.xy + uvReflect.z * normal.xz * 0.05 );\",\r\n                \"vec4 refractColor = texture2D( refractionMap, uvRefract.xy + uvRefract.z * normal.xz * 0.05 );\",\r\n\r\n                // multiply water color with the mix of both textures. then add lighting\r\n                \"gl_FragColor = vec4( waterColor, 1.0 ) * mix( refractColor, reflectColor, reflectance ) + specularColor;\",\r\n\r\n            \"}\"\r\n\r\n        ].join( \"\\n\" )\r\n    };\r\n    /**\r\n     * @file This file creates a realistic and expensive water effect. The material\r\n     * is real-time reflective & refractive, it calculates a distortion and flow of\r\n     * the water surface and implements a basic fresnel and lighting equation.\r\n     * \r\n     * @author Human Interactive\r\n     */\r\n    /*\r\n    \"use strict\";\r\n\r\n    var THREE = require( \"three\" );\r\n    var Reflector = require( \"./Reflector\" );\r\n    var Refractor = require( \"./Refractor\" );\r\n\r\n    var WaterShader = require( \"../shader/WaterShader\" );*/\r\n\r\n    /**\r\n     * Creates a water.\r\n     * \r\n     * @constructor\r\n     * @augments THREE.Mesh\r\n     * \r\n     * @param {Renderer} renderer - The renderer object.\r\n     * @param {Camera} camera - The camera object.\r\n     * @param {World} world - The world object.\r\n     * @param {object} options - The options of the reflector.\r\n     */\r\n    function Water( renderer, camera, world, options ) {\r\n        \r\n        THREE.Mesh.call( this );\r\n        \r\n        Object.defineProperties( this, {\r\n\r\n            // the width of the water mesh\r\n            width : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the height of the water mesh\r\n            height : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // approximate resolution value of the render target\r\n            resolution : {\r\n                value : 2048,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // speed of the water motions\r\n            waterSpeed : {\r\n                value : 0.03,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the color of the water\r\n            waterColor : {\r\n                value : new THREE.Color(),\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the reflectivity of the water\r\n            waterReflectivity : {\r\n                value : 0.02,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the direction of the light\r\n            lightDirection : {\r\n                value : new THREE.Vector3( 0, 1, 0),\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the color of the light\r\n            lightColor : {\r\n                value : new THREE.Color(),\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the shininess of the water\r\n            shininess : {\r\n                value : 20,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // the amount of segments of the water geometry\r\n            segments : {\r\n                value : 1,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // a cycle of a flow map phase\r\n            cycle : {\r\n                value : 0.15,\r\n                configurable : false,\r\n                enumerable : true,\r\n                writable : true\r\n            },\r\n            // a reference to the renderer object\r\n            _renderer : {\r\n                value : renderer,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // a reference to the camera object\r\n            _camera : {\r\n                value : camera,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // a reference to the world object\r\n            _world : {\r\n                value : world,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : false\r\n            },\r\n            // a reference to a reflector\r\n            _reflector : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            },\r\n            // a reference to a refractor\r\n            _refractor : {\r\n                value : null,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            },\r\n            // half cycle of a flow map phase\r\n            _halfCycle : {\r\n                value : 0,\r\n                configurable : false,\r\n                enumerable : false,\r\n                writable : true\r\n            }\r\n        } );\r\n        \r\n        // transfer the options values to the object\r\n        for ( var property in options )\r\n        {\r\n            if ( options.hasOwnProperty( property ) )\r\n            {\r\n                this[ property ] = options[ property ];\r\n            }\r\n        }\r\n\r\n        this._init();\r\n    }\r\n\r\n    Water.prototype = Object.create( THREE.Mesh.prototype );\r\n    Water.prototype.constructor = Water;\r\n\r\n    /**\r\n     * Update method of the water.\r\n     * \r\n     * @param {number} delta - The delta time value.\r\n     */\r\n    Water.prototype.update = function( delta ) {\r\n\r\n        // the water should not render itself\r\n        this.material.visible = false;\r\n\r\n        // update reflection and refraction\r\n        this._reflector.update();\r\n        this._refractor.update();\r\n\r\n        // make material visible again\r\n        this.material.visible = true;\r\n\r\n        // update water properties\r\n        this.material.uniforms.waterColor.value = this.waterColor;\r\n        this.material.uniforms.waterReflectivity.value = this.waterReflectivity;\r\n\r\n        // update light properties\r\n        this.material.uniforms.lightDirection.value = this.lightDirection;\r\n        this.material.uniforms.lightColor.value = this.lightColor;\r\n        this.material.uniforms.shininess.value = this.shininess;\r\n\r\n        // update water flow properties\r\n        this.material.uniforms.flowMapOffset0.value += this.waterSpeed * delta;\r\n        this.material.uniforms.flowMapOffset1.value += this.waterSpeed * delta;\r\n\r\n        // reset properties if necessary\r\n        if ( this.material.uniforms.flowMapOffset0.value >= this.cycle )\r\n        {\r\n            this.material.uniforms.flowMapOffset0.value = 0;\r\n\r\n            // if the delta value is high, \"flowMapOffset1\" must not set to zero\r\n            // but to its initial value to avoid a \"reset\" effect\r\n            if ( this.material.uniforms.flowMapOffset1.value >= this.cycle )\r\n            {\r\n                this.material.uniforms.flowMapOffset1.value = this._halfCycle;\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if ( this.material.uniforms.flowMapOffset1.value >= this.cycle )\r\n        {\r\n            this.material.uniforms.flowMapOffset1.value = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This overrides the standard three.js method. It ensures that other components\r\n     * of the water have the same position and orientation.\r\n     */\r\n    Water.prototype.updateMatrix = function() {\r\n\r\n        THREE.Mesh.prototype.updateMatrix.call( this );\r\n        \r\n        // just copy the matrix\r\n        this._reflector.matrix.copy( this.matrix );\r\n        this._refractor.matrix.copy( this.matrix );\r\n        \r\n        // update entities for reflection and refraction\r\n        this._reflector.makeReflectionPlane();\t\r\n        this._reflector.makeReflectionMatrix();\r\n        \r\n        this._refractor.makeRefractionPlane();\r\n    };\r\n\r\n    /**\r\n     * Initializes the water.\r\n     */\r\n    Water.prototype._init = function() {\r\n        \r\n        // geometry of the reflector\r\n        this.geometry = new THREE.PlaneBufferGeometry( this.width, this.height, this.segments, this.segments );\r\n        \r\n        // custom shader material\r\n        this.material = new THREE.ShaderMaterial( {\r\n            uniforms : THREE.UniformsUtils.clone( WaterShader.uniforms ),\r\n            vertexShader : WaterShader.vertexShader,\r\n            fragmentShader : WaterShader.fragmentShader\r\n        } );\r\n\r\n        // create reflector\r\n        this._reflector = new Reflector( this._renderer, this._camera, this._world, {\r\n            width: this.width,\r\n            height: this.height,\r\n            resolution: this.resolution\r\n        });\r\n        \r\n        // create refractor\r\n        this._refractor = new Refractor( this._renderer, this._camera, this._world, {\r\n            width: this.width,\r\n            height: this.height,\r\n            resolution: this.resolution\r\n        });\r\n        \r\n        // calculate half cycle\r\n        this._halfCycle = this.cycle * 0.5;\r\n        \r\n        // load flow and noise map\r\n        var flowMap = new THREE.TextureLoader().setCrossOrigin(true).load( \"https://res.cloudinary.com/xarta/image/upload/v1496407928/xarta/Eu0MQrk.png\" );\r\n        var noiseMap = new THREE.TextureLoader().setCrossOrigin(true).load( \"https://res.cloudinary.com/xarta/image/upload/v1497350431/xarta/KmwuMPu.jpg\" );\r\n        \r\n        // load normal maps\r\n        var normalMap0 = new THREE.TextureLoader().setCrossOrigin(true).load( \"https://res.cloudinary.com/xarta/image/upload/v1497350431/xarta/8pUBeuw.jpg\" );\r\n        normalMap0.wrapS = normalMap0.wrapT = THREE.RepeatWrapping;\r\n        \r\n        var normalMap1 = new THREE.TextureLoader().setCrossOrigin(true).load( \"https://res.cloudinary.com/xarta/image/upload/v1497350431/xarta/fB9BaJJ.jpg\" );\r\n        normalMap1.wrapS = normalMap1.wrapT = THREE.RepeatWrapping;\r\n            \r\n        // set reflection and refraction map\r\n        this.material.uniforms.reflectionMap.value = this._reflector._reflectionMap.texture;\r\n        this.material.uniforms.refractionMap.value = this._refractor._refractionMap.texture;\r\n\r\n        // set texture matrices for projective texture mapping\r\n        this.material.uniforms.textureMatrixReflection.value = this._reflector._textureMatrix;\r\n        this.material.uniforms.textureMatrixRefraction.value = this._refractor._textureMatrix;\r\n        \r\n        // set flow, noise and normal map to uniforms\r\n        this.material.uniforms.flowMap.value = flowMap;\r\n        this.material.uniforms.noiseMap.value = noiseMap;\r\n        this.material.uniforms.normalMap0.value = normalMap0;\r\n        this.material.uniforms.normalMap1.value = normalMap1;\r\n\r\n        // set the amount of segments of the water. this value determines, how often\r\n        // normal maps are repeated\r\n        this.material.uniforms.segments.value = this.segments;\r\n        \r\n        // set default values for water flow\r\n        this.material.uniforms.flowMapOffset0.value = 0;\r\n        this.material.uniforms.flowMapOffset1.value = this._halfCycle;\r\n        this.material.uniforms.halfCycle.value = this._halfCycle;\r\n        \r\n        // no auto-update for water\r\n        this.matrixAutoUpdate = false;\r\n    };\r\n\r\n    // module.exports = Water;\r\n\r\n\r\n\r\n","\"use strict\";\r\n// TODO: SASS TO JS TECHNIQUE TO READ THESE FROM .scss style sheet variables\r\nvar colours = new Array();                  // multi-use incl. pyramids (cylinders sic)\r\ncolours[0] = [\"orange\",     \"#ff0000\"];     // red background\r\ncolours[1] = [\"red\",        \"#0212f4\"];     // blue background\r\ncolours[2] = [\"green\",      \"#f7ec0e\"];     // yellow background\r\ncolours[3] = [\"yellow\",     \"#106316\"];     // green background\r\ncolours[4] = [\"purple\",     \"#f77c02\"];     // orange background\r\n\r\nvar camera, controls, sceneGL, rendererGL, clock;\r\n\r\nvar rendererCSS3D, sceneCSS3D;       // for YouTube iframes etc.\r\nvar ytWidth     = 480;              // YouTube\r\nvar ytHeight    = 360;\r\nvar vidWall     = null;\r\n// For YouTube\r\nvar Element = function ( id, x, y, z, ry, screenID ) \r\n{\r\n    var div = document.createElement( 'div' );\r\n    div.style.width = ytWidth.toString() + 'px';\r\n    div.style.height = ytHeight.toString() + 'px';\r\n    div.style.backgroundColor = '#000';    \r\n    div.style.zIndex = '13';     \r\n    var iframe = document.createElement( 'iframe' );\r\n    iframe.setAttribute(\"id\", screenID);\r\n    iframe.setAttribute('allowFullScreen', true);\r\n    iframe.setAttribute('webkitallowfullscreen', true);\r\n    iframe.setAttribute('mozallowfullscreen', true);\r\n    iframe.style.width = ytWidth.toString() + 'px';\r\n    iframe.style.height = ytHeight.toString() + 'px';\r\n    iframe.style.border = '0px';\r\n    //iframe.src=\"https://www.youtube.com/embed/M7lc1UVf-VE?enablejsapi=1&origin=https://xarta.co.uk\";\r\n    iframe.src = [ 'https://www.youtube.com/embed/', id, '?enablejsapi=1&origin=https://xarta.co.uk' ].join( '' );\r\n    //iframe.src = [ 'https://www.youtube.com/embed/', id, '?rel=0' ].join( '' );\r\n    div.appendChild( iframe );          \r\n    var object = new THREE.CSS3DObject( div );\r\n    object.position.set( x, y, z );\r\n    object.rotation.y = ry;         \r\n    return object;\r\n};\r\n\r\nvar s1; // YouTube screen1 (iframe)\r\nvar s2; // YouTube screen2\r\nvar s3; // YouTube screen3\r\nvar s4; // YouTube screen4\r\n\r\nfunction onYouTubeIframeAPIReady() \r\n{\r\n    s1 = new YT.Player('s1', \r\n    {\r\n    events:\r\n        {\r\n            'onReady': onPlayerReady,\r\n            'onStateChange': onPlayerStateChange\r\n        }\r\n    });\r\n    s2 = new YT.Player('s2', \r\n    {\r\n    events:\r\n        {\r\n            'onReady': onPlayerReady,\r\n            'onStateChange': onPlayerStateChange\r\n        }\r\n    });\r\n    s3 = new YT.Player('s3', \r\n    {\r\n    events:\r\n        {\r\n            'onReady': onPlayerReady,\r\n            'onStateChange': onPlayerStateChange\r\n        }\r\n    });\r\n    s4 = new YT.Player('s4', \r\n    {\r\n    events:\r\n        {\r\n            'onReady': onPlayerReady,\r\n            'onStateChange': onPlayerStateChange\r\n        }\r\n    });\r\n    \r\n}\r\n\r\nfunction onPlayerReady(event) {\r\n    event.target.playVideo();\r\n    //s1.requestFullscreen();\r\n}\r\n\r\nvar YTdone = false;\r\nfunction onPlayerStateChange(event) {\r\n    if (event.data == YT.PlayerState.PLAYING && !YTdone) {\r\n        setTimeout(stopVideo, 6000);\r\n        YTdone = true;\r\n    }\r\n}\r\n\r\nfunction stopVideo() {\r\n    //player.stopVideo();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar water = null;\r\n\r\n// animation sequences (calling them phases)\r\nvar phaseCubeApproach = true;   // X A R T A cubes - approaching us\r\nvar phaseMoonPushBack = false;   // simplfies directions vs camera\r\n                                // i.e. start in position we want to end-up with\r\n                                // but put the moon back before visible, like\r\n                                // loading a spring-return\r\n\r\nvar phaseMoonApproach = false;  // trigger for moon to approach\r\nvar phaseSink = false;          // trigger for cubes X A R T A to sink under water\r\n\r\n// global for now for easy inter-function access\r\nvar moonz = -500;               // where we want the moon (has to be far away with depth)\r\n                                // even though it's a 2D picture ... else camera views\r\n                                // will distort it too much, and also want it to look big\r\n                                // compared to pyramids that fly close to it ...\r\n                                // but not so far away that lighting becomes harder\r\nvar moonMesh;                   // the mesh to add to the sceneGL\r\nvar starsMesh;                  // the mesh to add to the sceneGL\r\n\r\nvar num_cylinders = 0;\r\nvar num_cylinders_so_far = 0;\r\nvar cylinderMasterOpacity = 0;\r\nvar range_cylinders = 499;  // keep within 3D bounds {x, y, z} -> 499 etc.\r\nvar cylinders;              // Array()\r\nvar calmCylinders = false;  // want cylinders to scurry off screen - stop distracting\r\n                            // when video player or photo slider displayed etc.\r\n        /*\r\n        // TEST\r\n        setTimeout(function() {\r\n            window.calmCylinders = true;\r\n        }, 15000);\r\n        */\r\n\r\n                            // ***********************************************************\r\nconst YES = 2;              // NB: Choice NOT TO SUPPORT IExplr EARLIER THAN 11 (ES2015)\r\nconst NO = 0;               // ... the target audience for my personal website is \r\nconst PENDING = 1;          // ... likely to have a more recent browser (technology ppl)\r\n                            // ***********************************************************\r\n\r\nvar saveCycles = NO;        // monostable delay after calmCyclinders set to true\r\n                            // - use to toggle whether cylinder matrix updates with changes\r\n                            // reset with calmCylinders = false\r\n\r\n\r\nvar fps = 1;                // calculate from frames/accDelta etc.\r\nvar frames = 0;             // count frames in accumalative-delta-time\r\nvar accDelta = 0;           // accumulative delta time (avoid divide by zero)\r\n\r\n                            // use fps to determine computation power of rendering device\r\n                            // (nb not doing webGL detect specifically or explicit canvas fallbacks)\r\n                            // Use idea of progressive (computation) enchancement ... so don't show\r\n                            // computationally expensive water on low-compute devices\r\n                            // or, limit cylindars on low-compute devices, proportional to fps\r\n\r\n                            // nb: first 2 or 3 seconds not stable fps, when cubes are initialised\r\n                            //     so, not perfect.\r\n\r\n                            // Xarta testing on Samsung Galaxy S3, Samsung Note 4, Haswell I7 (incl. own GPU)\r\n                            // and, Sandy Bridge I5 with same age medium-grade graphics card\r\n                            // and, year 2009 Core 2 Duo laptop with separate graphics card (gets warm)\r\n\r\n\r\nfunction YouTubeVidWall()\r\n{\r\n    if (vidWall === null)\r\n    {\r\n        // DO ONCE\r\n        // TODO: ADD GUI CONTROLS TO CONTROL YOUTUBE VIA IFRAME API\r\n        // HOPEFULLY WILL BE ABLE TO DYNAMICALLY CHANGE CONTENT TOO\r\n\r\n        // LOAD YOUTUBE IFRAME PLAYER API -----------------------------\r\n        // 2. This code loads the IFrame Player API code asynchronously.\r\n        var tag = document.createElement('script');\r\n\r\n        tag.src = \"https://www.youtube.com/iframe_api\";\r\n        var firstScriptTag = document.getElementsByTagName('script')[0];\r\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n        // It will look for global function: onYouTubeIframeAPIReady()\r\n        //  ------------------------------------------------------------\r\n\r\n        vidWall = new THREE.Group();\r\n        var x = 500;\r\n        var y = -ytHeight;\r\n        var z = -200;\r\n        var ry = -1 * (Math.PI / 2) ; // rotate about so 90deg on the right\r\n\r\n        vidWall.add( new Element( 'M7lc1UVf-VE', x, y, z, ry, 's1' ) );\r\n        vidWall.add( new Element( 'DjLwd9Ih8V8', x, y, z+ytWidth, ry, 's2' ) );\r\n        vidWall.add( new Element( 'DjLwd9Ih8V8', x, y+ytHeight, z, ry, 's3' ) );\r\n        vidWall.add( new Element( 'DjLwd9Ih8V8', x, y+ytHeight, z+ytWidth, ry, 's4' ) );               \r\n        //group.add( new Element( 'DjLwd9Ih8V8', 240, 0, 0, Math.PI / 2 ) );\r\n        sceneCSS3D.add( vidWall );\r\n    }\r\n \r\n    camera.position.set( -498, 20, 45 );\r\n    // TODO: LOOK AT DOLLY OPTIONS E.G.\r\n    // https://github.com/amelierosser/threejs-camera-dolly/blob/master/index.html\r\n\r\n\r\n}\r\n\r\ninit(); // camera, water, moon, cylinders etc. etc. - add to sceneGL\r\n\r\n  \r\n\r\n                \r\n            \r\n/*\r\n// create the video element\r\n\tvideo = document.createElement( 'video' );\r\n\t// video.id = 'video';\r\n\t// video.type = ' video/ogg; codecs=\"theora, vorbis\" ';\r\n    video.crossOrigin = \"anonymous\";\r\n    video.src = \"https://res.cloudinary.com/xarta/video/upload/v1497265079/xarta/SampleVideo_720x480_1mb.mp4\";\r\n\tvideo.load(); // must call after setting/changing source\r\n\tvideo.play();\r\n\t\r\n\tvideoImage = document.createElement( 'canvas' );\r\n\tvideoImage.width = 480;\r\n\tvideoImage.height = 204;\r\n\r\n\tvideoImageContext = videoImage.getContext( '2d' );\r\n\t// background color if no video present\r\n\tvideoImageContext.fillStyle = '#ffffff';\r\n\tvideoImageContext.fillRect( 0, 0, videoImage.width, videoImage.height );\r\n\r\n\tvideoTexture = new THREE.Texture( videoImage );\r\n\tvideoTexture.minFilter = THREE.LinearFilter;\r\n\tvideoTexture.magFilter = THREE.LinearFilter;\r\n\t\r\n\tvar movieMaterial = new THREE.MeshBasicMaterial( { map: videoTexture, overdraw: true, side:THREE.DoubleSide } );\r\n\t// the geometry on which the movie will be displayed;\r\n\t// \t\tmovie image will be scaled to fit these dimensions.\r\n\tvar movieGeometry = new THREE.PlaneGeometry( 240, 100, 4, 4 );\r\n\tvar movieScreen = new THREE.Mesh( movieGeometry, movieMaterial );\r\n\tmovieScreen.position.set(0,50,-100);\r\n\tsceneGL.add(movieScreen);\r\n\t\r\n\t//camera.position.set(0,150,300);\r\n\t//camera.lookAt(movieScreen.position);\r\n*/\r\n\r\n\r\n\r\nvar initscale = 8;                          // cube scaling\r\nvar cubes = new Array();                    // 5 cubes ... X A R T A\r\nvar cad = -800;                             // cube approach distance (lead)\r\n                                            // using this to sync whoop sound\r\n\r\nif (window.innerHeight > window.innerWidth) // portrait e.g. phones\r\n{\r\n    // staggar z so fits camera \"perspective\" view\r\n    cubes[0] = getNewXartaCube( -8,5, cad,      \"XARTA\", 0, colours);\r\n    cubes[1] = getNewXartaCube(  0,5, cad-20,   \"ARTAX\", 1, colours);\r\n    cubes[2] = getNewXartaCube( 10,5, cad-40,   \"RTAXA\", 2, colours);\r\n    cubes[3] = getNewXartaCube( 20,5, cad-60,   \"TAXAR\", 3, colours);\r\n    cubes[4] = getNewXartaCube( 30,5, cad-80,   \"AXART\", 4, colours);\r\n}\r\nelse\r\n{\r\n    // just in a row - camera zoom will always mean fitting (mostly)\r\n    cubes[0] = getNewXartaCube( -10,5, cad, \"XARTA\", 0, colours);\r\n    cubes[1] = getNewXartaCube(   0,5, cad, \"ARTAX\", 1, colours);\r\n    cubes[2] = getNewXartaCube(  10,5, cad, \"RTAXA\", 2, colours);\r\n    cubes[3] = getNewXartaCube(  20,5, cad, \"TAXAR\", 3, colours);\r\n    cubes[4] = getNewXartaCube(  30,5, cad, \"AXART\", 4, colours);\r\n}\r\n\r\n\r\nanimate();  // kickstart the animation loop\r\n\r\n\r\n\r\n\r\n\r\nfunction getNewXartaCube(xPos, yPos, zPos, word, colourStartIndex, colours) \r\n{\r\n\tconsole.log('getNewXartaCube('+xPos+', '+yPos+', '+zPos+', '+word+', '+colourStartIndex+')');\r\n\r\n    var RIGHT = document.createElement(\"canvas\");\r\n    var RIGHTcontext = RIGHT.getContext(\"2d\");\r\n    RIGHT.width = RIGHT.height = 256;\r\n    RIGHTcontext.shadowColor = \"#000\";\r\n    RIGHTcontext.shadowBlur = 7;\r\n    RIGHTcontext.fillStyle = colours[(colourStartIndex + 0) % 5][1];\r\n    RIGHTcontext.fillRect(0, 0, 256, 256);\r\n    RIGHTcontext.fillStyle = colours[(colourStartIndex + 0) % 5][0];\r\n    RIGHTcontext.font = \"150pt arial bold\";\r\n    RIGHTcontext.fillText(word.substr(4,1), 64, 200);\r\n\r\n    var LEFT = document.createElement(\"canvas\");\r\n    var LEFTcontext = LEFT.getContext(\"2d\");\r\n    LEFT.width = LEFT.height = 256;\r\n    LEFTcontext.shadowColor = \"#000\";\r\n    LEFTcontext.shadowBlur = 7;\r\n    LEFTcontext.fillStyle = colours[(colourStartIndex + 1) % 5][1];\r\n    LEFTcontext.fillRect(0, 0, 256, 256);\r\n    LEFTcontext.fillStyle = colours[(colourStartIndex + 1) % 5][0];\r\n    LEFTcontext.font = \"150pt arial bold\";\r\n    LEFTcontext.fillText(word.substr(1,1), 64, 200);\r\n\r\n    var TOP = document.createElement(\"canvas\");\r\n    var TOPcontext = TOP.getContext(\"2d\");\r\n    TOP.width = TOP.height = 256;\r\n    TOPcontext.shadowColor = \"#000\";\r\n    TOPcontext.shadowBlur = 7;\r\n    TOPcontext.fillStyle =  colours[(colourStartIndex + 2) % 5][1];\r\n    TOPcontext.fillRect(0, 0, 256, 256);\r\n    TOPcontext.fillStyle = colours[(colourStartIndex + 2) % 5][0];\r\n    TOPcontext.font = \"150pt arial bold\";\r\n    TOPcontext.fillText(word.substr(2,1), 64, 200);\r\n\r\n    var BOTTOM = document.createElement(\"canvas\");\r\n    var BOTTOMcontext = BOTTOM.getContext(\"2d\");\r\n    BOTTOM.width = BOTTOM.height = 256;\r\n    BOTTOMcontext.shadowColor = \"#000\";\r\n    BOTTOMcontext.shadowBlur = 7;\r\n    BOTTOMcontext.fillStyle = colours[(colourStartIndex + 3) % 5][1];\r\n    BOTTOMcontext.fillRect(0, 0, 256, 256);\r\n    BOTTOMcontext.fillStyle = colours[(colourStartIndex + 3) % 5][0];\r\n    BOTTOMcontext.font = \"150pt arial bold\";\r\n    BOTTOMcontext.fillText(word.substr(3,1), 64, 200);\r\n\r\n    var FRONT = document.createElement(\"canvas\");\r\n    var FRONTcontext = FRONT.getContext(\"2d\");\r\n    FRONT.width = FRONT.height = 256;\r\n    FRONTcontext.shadowColor = \"#000\";\r\n    FRONTcontext.shadowBlur = 7;\r\n    //FRONTcontext.fillStyle = colours[(colourStartIndex + 4) % 5][1];\r\n    FRONTcontext.fillStyle = \"black\";\r\n    FRONTcontext.fillRect(0, 0, 256, 256);\r\n    FRONTcontext.fillStyle = colours[(colourStartIndex + 4) % 5][0];\r\n    FRONTcontext.font = \"150pt arial bold\";\r\n    FRONTcontext.fillText(word.substr(0,1), 64, 200);\r\n\r\n    var RIGHTmesh =     new THREE.MeshBasicMaterial({ map: new THREE.Texture(RIGHT), \r\n                                                    transparent: true, opacity: 0.5 });\r\n    RIGHTmesh.map.needsUpdate = true;\r\n\r\n    var LEFTmesh =      new THREE.MeshBasicMaterial({ map: new THREE.Texture(LEFT), \r\n                                                    transparent: true, opacity: 0.5 });\r\n    LEFTmesh.map.needsUpdate = true;\r\n\r\n    var TOPmesh =       new THREE.MeshBasicMaterial({ map: new THREE.Texture(TOP), \r\n                                                    transparent: true, opacity: 0.5 });\r\n    TOPmesh.map.needsUpdate = true;\r\n\r\n    var BOTTOMmesh =    new THREE.MeshBasicMaterial({ map: new THREE.Texture(BOTTOM), \r\n                                                    transparent: true, opacity: 0.5 });\r\n    BOTTOMmesh.map.needsUpdate = true;\r\n\r\n    var FRONTmesh =     new THREE.MeshBasicMaterial({ map: new THREE.Texture(FRONT), \r\n                                                    transparent: true, opacity: 0.5 });\r\n    FRONTmesh.map.needsUpdate = true;\r\n\r\n\r\n    // cross origin so I can use cloudinary, and 256 pixels width & height\r\n\tvar textureLoader = new THREE.TextureLoader().setCrossOrigin(true);\r\n    textureLoader.setPath('https://res.cloudinary.com/xarta/image/upload/');\r\n\tvar texture = textureLoader.load( \"v1497007069/xarta/2014-me-at-work256.jpg\" ); // BACK\r\n\r\n    // so we're making a cube e.g. 5 faces are letters X A R T A, and the backface is a pic of me lol ...\r\n    // and by using transparency, light from the rest of the dynamic sceneGL will illuminate \"me\" sometimes through the transparent cube\r\n\tvar materials = [\r\n\t\tRIGHTmesh,\r\n\t\tLEFTmesh,\r\n\t\tTOPmesh,\r\n\t\tBOTTOMmesh,\r\n\t\tFRONTmesh,\r\n\t\tnew THREE.MeshBasicMaterial( {  map: texture, \r\n                                        side:THREE.DoubleSide, \r\n                                        shading: THREE.FlatShading, \r\n                                        transparent: true, opacity: 0.5, color: 0xf902d4 } ) // BACK\r\n\t];\r\n\t\r\n\tvar geometry = new THREE.BoxGeometry( 1, 1, 1 );\r\n\r\n\r\n    var obj = new THREE.Mesh( geometry, materials );\r\n\r\n    obj.name = word.substr(0,1);                    // letter on face of cube that is facing us\r\n\tobj.scale.set(initscale,initscale,initscale);   // initiscale is a global\r\n    obj.position.z = zPos;\r\n    obj.position.x = xPos;\r\n    obj.position.y = yPos;\r\n    \r\n    obj.lightDirection = new THREE.Vector3(0.7, 20, 0); // bright, off centre\r\n\r\n    obj.xartaRot = 1; // used for initial object-axis rotation direction\r\n\r\n\tsceneGL.add( obj );\r\n\r\n    return(obj);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// this function should now be called\r\n// extended animate or something (more than a tumble - it evolved)\r\n\r\n// MISTAKE IN NAMING ON MY PART !!!\r\n// transformRate is clock Delta ... SMALLER transformRate for FASTER MACHINE\r\nvar cubesToTumble = true;\r\nfunction tumble(transformRate)\r\n{\r\n\r\n    if (cubesToTumble)\r\n    {\r\n        var xartaRotAcc = 0;\r\n        cubes.forEach(function(cube, index, ar){\r\n\r\n\r\n            if ( (5 < cubes[index].rotation.x) && (cubes[index].rotation.x < 6) )\r\n            {\r\n                cubes[index].xartaRot = -1; // reverse rotation\r\n            }\r\n            if (cubes[index].rotation.x < 0)\r\n            {\r\n                cubes[index].xartaRot = 0; // stop, showing X A R T A (not precise on slow machine)\r\n            }\r\n            \r\n            xartaRotAcc += cubes[index].xartaRot;\r\n\r\n            // rotation.x starts at 0 and is positive accumulative\r\n            cubes[index].rotation.x += (cubes[index].xartaRot * transformRate);\r\n            cubes[index].rotation.y += (cubes[index].xartaRot * transformRate);\r\n\r\n            //console.log(cubes[index].xartaRot);\r\n            //console.log(cubes[index].rotation.x);\r\n        }, this);\r\n\r\n        if (xartaRotAcc === 0)\r\n        {\r\n            cubesToTumble = false;\r\n        }\r\n\r\n    }\r\n \r\n\r\n    var approachRate = 200 * transformRate; // SMALLER VALUE ON FASTER MACHINE\r\n                                            // FINER GRAINED INCREMENTS\r\n    var fit =  ( (window.innerWidth / window.innerHeight) * 2 ) - approachRate ;   \r\n        // reasonably constant\r\n        // during animation\r\n\r\n        // using global var \"cad\"\r\n        // \"cube approach distance\"\r\n\r\n\r\n    var scalarCAD = fit-cad;                                    // total distance to travel for approach\r\n    var scalarCADsoFar = cubes[0].position.z - cad;             // always positive\r\n    var scalarCADsoFarFraction = scalarCADsoFar / scalarCAD;    // factional value less than 1\r\n\r\n    if (phaseCubeApproach === true)\r\n    {\r\n        if (scalarCADsoFarFraction > 0.7 )\r\n        {\r\n            if (typeof whoop.play() == 'function') \r\n            { \r\n                whoop.play(); \r\n            }\r\n        }\r\n\r\n        // stop the approach of everything, possibly staggard,\r\n        // once X (as in X A R T A) has reached our chosen z-axis\r\n        if (cubes[0].position.z < fit )\r\n        {\r\n            for (i=0; i < cubes.length; i++)\r\n            {\r\n                cubes[i].position.z += approachRate;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            phaseCubeApproach = false;\r\n            setTimeout(function() {\r\n                window.phaseSink = true;\r\n            }, 8000);\r\n        }\r\n    }\r\n\r\n    // sink all the cubes under water, out the way (job done - now just adds colour)\r\n    if (phaseSink === true)\r\n    {\r\n        var yBottom = -15;\r\n        for (i=0; i < cubes.length; i++)\r\n        {\r\n            phaseSink = false;\r\n            // also straighten-out ... not fussed about off-screen sunken cubes in portrait\r\n            // - if device switches to landscape, will then display\r\n            if (cubes[i].position.z < fit )\r\n            {\r\n                cubes[i].position.z += (approachRate/50) * (i + 1);\r\n            }\r\n\r\n            // sink all until yBottom\r\n            if( cubes[i].position.y > yBottom )\r\n            {\r\n                phaseSink = true;\r\n                if(cubes[i].rotation.x > -0.5)\r\n                {\r\n                    // rotate 45 degrees to tilt front faces toward us, as we are looking down\r\n                    cubes[i].rotation.x -= transformRate;\r\n                }\r\n                cubes[i].position.y -= approachRate/50;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    if (phaseMoonPushBack === true)\r\n    {\r\n        moonz = -1000;              // in the dark, out of view\r\n        phaseMoonPushBack = false;  // do once\r\n        phaseMoonApproach = true;   // now slow approach\r\n    }\r\n\r\n    if (phaseMoonApproach === true)\r\n    {\r\n        if (moonz < -500)\r\n        {\r\n            if(window.moonMesh.material.opacity < 1)\r\n            {\r\n                moonMesh.material.opacity += 0.1;\r\n            }\r\n            else\r\n            {\r\n                moonMesh.material.opacity = 1;\r\n            }\r\n            \r\n            moonz += (50*transformRate);\r\n            moonMesh.position.z = moonz;\r\n        }\r\n        else\r\n        {   \r\n            moonMesh.material.opacity = 1;\r\n            phaseMoonApproach = false;\r\n            \r\n        }\r\n    }\r\n\r\n    // TODO: Cylinder???  PYRAMID !!!  MUST HAVE BEEN MAD !!!!\r\n    // RANDOM CYLINDER MOVEMENT  (ACTUALLY NOW JUST \"SHAPE\")\r\n    for (var i = 0; i < num_cylinders_so_far; i++) {\r\n\r\n\r\n        cylinders[i].position.x += cylinders[i].xartaDirx;\r\n        cylinders[i].position.y += cylinders[i].xartaDiry;\r\n        cylinders[i].position.z += cylinders[i].xartaDirz;\r\n\r\n\r\n        \r\n\r\n\r\n\r\n        // materialise cylinders at start or later, if not paused\r\n        //var cylinderOpacity = cylinderMasterOpacity;\r\n        var cylinderOpacity = cylinders[i].material.opacity;\r\n        if ( (cylinderOpacity < 1.0) && (calmCylinders === false) )\r\n        {\r\n            cylinderOpacity += transformRate/300;\r\n            if (cylinderOpacity > 1.0)\r\n            {\r\n                cylinderOpacity = 1.0;\r\n            }\r\n        }\r\n        else if ( (cylinderOpacity > 0) && (calmCylinders === true) )\r\n        {\r\n            cylinderOpacity -= transformRate/500;\r\n            if (cylinderOpacity < 0)\r\n            {\r\n                cylinderOpacity = 0;\r\n            }\r\n        }\r\n\r\n        cylinderMasterOpacity = cylinderOpacity;\r\n        cylinders[i].material.opacity = cylinderOpacity;\r\n        \r\n        var moveRate;\r\n\r\n        if(calmCylinders === false)\r\n        {\r\n            moveRate = 90*transformRate;\r\n            saveCycles = NO; // reset monostable delay for suppressing matrix update\r\n        }\r\n        else\r\n        {\r\n            moveRate = 0; // pause cylinders when out the way\r\n            if ( saveCycles === NO)\r\n            {\r\n                saveCycles = PENDING;\r\n                setTimeout(function() {\r\n                    window.saveCycles = YES;\r\n                }, 14000);\r\n            }\r\n        }\r\n        \r\n        // slow down x direction moverate if even partly under-water\r\n        // as if low-fps device then fps under water part can't keep up\r\n        if (moveRate > 0)\r\n        {\r\n            \r\n\r\n            if (cylinders[i].position.y < 0)\r\n            {\r\n                // console.log(\"slowing a shape down by window.fps/100: \" + window.fps/100);\r\n\r\n                if (cylinders[i].xartaDirx < 0)\r\n                {\r\n                    if ( (cylinders[i].xartaDirx * -1) > ( (window.fps/150) * moveRate ) )\r\n                    {\r\n                        cylinders[i].xartaDirx = 0.95 * cylinders[i].xartaDirx;\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if ( (cylinders[i].xartaDirx) > ( (window.fps/150) * moveRate ) )\r\n                    {\r\n                        cylinders[i].xartaDirx = 0.95 * cylinders[i].xartaDirx;\r\n                    }\r\n                    \r\n                }   \r\n                \r\n                \r\n                if (cylinders[i].xartaDiry < 0) \r\n                {\r\n                    if ( (cylinders[i].xartaDiry * -1) > ( (window.fps/120) * moveRate ) )\r\n                    {\r\n                        cylinders[i].xartaDiry = cylinders[i].xartaDiry * 0.97;\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if ( (cylinders[i].xartaDiry) < ( (window.fps/100) * moveRate * 1.2 ) )\r\n                    {\r\n                        cylinders[i].xartaDiry = cylinders[i].xartaDiry * 1.1;\r\n                    }\r\n                }\r\n\r\n                if (cylinders[i].xartaDirz < 0) \r\n                {\r\n                    if ( (cylinders[i].xartaDirz * -1) > ( (window.fps/100) * moveRate ) )\r\n                    {\r\n                        cylinders[i].xartaDirz = cylinders[i].xartaDirz * 0.9;\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if ( (cylinders[i].xartaDirz) < ( (window.fps/100) * moveRate ) )\r\n                    {\r\n                        cylinders[i].xartaDirz = cylinders[i].xartaDirz * 1.1;\r\n                    }\r\n                }\r\n                \r\n            }\r\n            else if ( (cylinders[i].position.y < 250) && (cylinders[i].position.y > 100) )\r\n            {\r\n                if (i % Math.floor(Math.random() * 10) === 1)\r\n                {\r\n                    // add some random x-direction\r\n                    if(Math.abs(cylinders[i].xartaDirx) < (window.fps/100)*moveRate )\r\n                    {\r\n                        cylinders[i].xartaDirx = (Math.random() - 0.5) * 2 * moveRate; // velocity\r\n                    }              \r\n                };\r\n\r\n                if (i % Math.floor(Math.random() * 5) === 1)\r\n                {\r\n                    // add some random x-direction\r\n                    if(Math.abs(cylinders[i].xartaDirz) < (window.fps/100)*moveRate )\r\n                    {\r\n                        cylinders[i].xartaDirz = (Math.random() - 0.5) * 2 * moveRate; // velocity\r\n                    }              \r\n                };               \r\n\r\n                if (cylinders[i].xartaDiry > 0)\r\n                {\r\n                    if ( (cylinders[i].xartaDiry) < ( 0.9 * moveRate) )\r\n                    {\r\n                        cylinders[i].xartaDiry = cylinders[i].xartaDiry * 1.5;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                     if ( (cylinders[i].xartaDiry) < ( moveRate ) )\r\n                    {\r\n                        cylinders[i].xartaDiry = cylinders[i].xartaDiry * 1.01;\r\n                    }                   \r\n                }\r\n            }\r\n        }\r\n\r\n        // move out the way faster (once at the edges, will have velocity 0)\r\n        if(saveCycles === PENDING)\r\n        {\r\n            cylinders[i].xartaDirx = cylinders[i].xartaDirx * 1.02;\r\n            cylinders[i].xartaDiry = cylinders[i].xartaDiry * 1.02;\r\n            cylinders[i].xartaDirz = cylinders[i].xartaDirz * 1.02;\r\n        }\r\n\r\n        // KEEP WITHIN X, Y, Z BOUNDARIES\r\n        if (cylinders[i].position.x > range_cylinders)\r\n        {\r\n            cylinders[i].xartaDirx = (Math.random() * -1) * moveRate;\r\n        }\r\n\r\n        if (cylinders[i].position.y > range_cylinders)\r\n        {\r\n            cylinders[i].xartaDiry = (Math.random() * -1) * moveRate;\r\n        }\r\n\r\n        if (cylinders[i].position.z > 100)\r\n        {\r\n            cylinders[i].xartaDirz = (Math.random() * -1) * moveRate;\r\n        }\r\n\r\n\r\n        if (cylinders[i].position.x < (-1 * range_cylinders))\r\n        {\r\n            cylinders[i].xartaDirx = (Math.random() * 1) * moveRate;\r\n        }\r\n\r\n        if (cylinders[i].position.y <  (-1 * range_cylinders))\r\n        {\r\n            cylinders[i].xartaDiry = (Math.random() * 1) * moveRate;\r\n        }\r\n\r\n        if (cylinders[i].position.z <  (-1 * 498))\r\n        {\r\n            cylinders[i].xartaDirz = (Math.random() * 1) * moveRate;\r\n        }\r\n\r\n        // nb: relying on optimisation to negate other unneccessary computation\r\n        if ( (saveCycles === NO) || (saveCycles === PENDING) )\r\n        {\r\n            cylinders[i].updateMatrix();\r\n        }\r\n        \r\n\r\n\r\n    }\r\n}\r\n\r\nfunction init() {\r\n\r\n    var loader = new THREE.TextureLoader().setCrossOrigin(true);    // Use same cross-origin loader for all assets\r\n    loader.setPath('https://res.cloudinary.com/xarta/image/upload/');\r\n    // GET LOADING GOING NOW, STRAIGHT-AWAY\r\n\r\n    // Load the background texture  STARS (from NASA galleries)\r\n    var stars = loader.load( 'v1497350431/xarta/spiral-galaxy.jpg' );               \r\n    \r\n    \r\n    // Load the background texture MOON (found with Google ... oops - forgot attribution)\r\n    //                                  ... was a jpg, but wanted a circular cropped transparent png\r\n    //                                  ... it's not perfect even with the feathering ... but is ok\r\n\r\n    // responosive sizes/quality ... big moon is high quality transparent png (over 300KB)\r\n\r\n    \r\n    var loadTime = Date.now() - timerStart;     // set timerStart on index.html - doing this instead of\r\n                                            // window.performance as need before window is ready\r\n\r\n    clock = new THREE.Clock();\r\n    var camFarPlane = 3000;\r\n    camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, camFarPlane);\r\n    camera.position.set(6, 10, 50);\r\n\r\n\r\n    sceneGL = new THREE.Scene();\r\n    sceneCSS3D = new THREE.Scene();\r\n\r\n    \r\n    var rendererglZ = 1;     // 1 or -1\r\n                            // -1 makes CSS3D YouTube controls accessible on top, but hides WebGL\r\n                            // ... and no point in having alpha background WebGL\r\n\r\n    rendererCSS3D = new THREE.CSS3DRenderer();\r\n    rendererCSS3D.setSize( window.innerWidth, window.innerHeight );\r\n    rendererCSS3D.domElement.style.position = 'absolute';\r\n    rendererCSS3D.domElement.style.top = 0;\r\n    rendererCSS3D.domElement.style.zIndex = 10;\r\n\r\n    if ( rendererglZ === -1)\r\n    {\r\n        console.log(\"CSS3D in front of WebGL e.g. YouTube controls accessible\");\r\n        rendererGL = new THREE.WebGLRenderer();\r\n        rendererGL.setClearColor(0x000000, 1); \r\n        sceneGL.fog = new THREE.FogExp2(0x000000, 0.002); // exponential, color, ex\r\n        rendererGL.setClearColor(sceneGL.fog.color);\r\n    }\r\n    else\r\n    {\r\n        // to blend with CSS3D\r\n        console.log(\"WebGL (transparent) in front of CSS3D\");\r\n        rendererGL = new THREE.WebGLRenderer({alpha:true, antialias: true});\r\n        rendererGL.setClearColor(0x000000, 0.0);\r\n        sceneGL.fog = new THREE.Fog(0x000000, 800,900); // linear, color, near, far\r\n        //rendererGL.setClearColor(sceneGL.fog.color);\r\n    }\r\n\r\n\r\n    rendererGL.setPixelRatio(window.devicePixelRatio);\r\n    rendererGL.setSize(window.innerWidth, window.innerHeight);\r\n    \r\n    rendererGL.domElement.style.position = 'absolute';\r\n    rendererGL.domElement.style.zIndex = rendererglZ;    // -1 to make YouTube control access easy,\r\n                                                //  but behind webGL objects\r\n\r\n                                                // TODO TODO TODO TODO\r\n                                                // TEST IF CAN CHANGE DYNAMICALLY, LATER\r\n    rendererGL.domElement.style.top = 0;\r\n\r\n    rendererGL.autoclear = false;              // TODO: NOT SURE ABOUT THIS, AND MANUAL CLEARING OF \"STAGE BUFFER\" - See water.js\r\n\r\n    rendererCSS3D.domElement.appendChild(rendererGL.domElement);\r\n    \r\n    var container = document.getElementById('container');\r\n    //container.appendChild(rendererGL.domElement); // now going to append to CSS3D renderer\r\n    container.appendChild( rendererCSS3D.domElement );      \r\n\r\n\r\n    // world\r\n    var world = { scene: sceneGL };\r\n\r\n\r\n\r\n    // STARS\r\n    starsMesh = new THREE.Mesh( \r\n        new THREE.PlaneGeometry(45, 45,1, 1),\r\n        new THREE.MeshBasicMaterial({\r\n            map: stars\r\n        }));\r\n\r\n    starsMesh.position.x = -350;  \r\n    starsMesh.position.z = -820;            // behind moon - further back is too dark/blurry, but obscures things behind it\r\n    starsMesh.scale.set(50, 50,10);\r\n    //starsMesh.material.depthTest = true;    // no need\r\n    //starsMesh.material.depthWrite = true;\r\n\r\n    sceneGL.add(starsMesh); \r\n\r\n    // MOON\r\n    function getTheMoon()\r\n    {\r\n        var theMoon;\r\n        var moonLoaded = function()\r\n        {\r\n            console.log(\"in moonLoaded\");\r\n            window.moonMesh = new THREE.Mesh( \r\n                new THREE.PlaneGeometry(45, 45,1, 1),\r\n                new THREE.MeshBasicMaterial(\r\n                    {\r\n                        map: theMoon, \r\n                        transparent: true, \r\n                        opacity: 0.0, color: 0xff0000\r\n                    })\r\n                );   \r\n            // keep size in portrait mode, but shift partly offscreen to left\r\n            // nb will appear bigger with bigger height to width ratio, because\r\n            // of perspective camera settings and how \"near\" we are to it\r\n            window.moonMesh.position.x = -1 * 0.25 * window.innerWidth;\r\n            window.moonMesh.position.y = 20;\r\n            window.moonMesh.position.z = window.moonz;\r\n            window.moonMesh.scale.set(13, 14,14); \r\n            window.moonMesh.material.depthTest = true;   // because transparent png\r\n            window.moonMesh.material.depthWrite = true;\r\n\r\n            sceneGL.add(window.moonMesh);    \r\n            window.moonMesh.material.color.setHex( 0xffffff );\r\n            window.phaseMoonPushBack = true;\r\n            console.log(\"moon should be added to sceneGL now\");\r\n\r\n        };\r\n\r\n        // the compute times in devices might vary considerably each time the page is refreshed,\r\n        // even with cached resources. Resorting to lower quality only if compute/load time is\r\n        // excessive, to help a little ... different between 47KB and over 300KB images\r\n        // (The lowest quality is quite apparent on a Note 4)\r\n        if ( (window.innerWidth > 768) || (loadTime < 2500) || window.fps > 5 )\r\n        {\r\n            theMoon = loader.load( 'v1496588500/xarta/moon.png', moonLoaded );\r\n        }\r\n        else if ( (window.innerWidth > 512) || (loadTime < 3000) )\r\n        {\r\n            theMoon = loader.load( 'v1496576988/xarta/moon-lower-quality-512.png', moonLoaded );\r\n        }\r\n        else\r\n        {\r\n            theMoon = loader.load( 'v1496586463/xarta/moon-lower-quality-256.png', moonLoaded);\r\n        }\r\n    }\r\n\r\n    getTheMoon();\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    // water computationally HEAVY\r\n    //setTimeout(function() {\r\n\r\n      //  if(window.fps > 7)\r\n        //{\r\n            // WATER\r\n                water = new Water(rendererGL, camera, world, {\r\n                width: 210,\r\n                height: 200,\r\n                segments: 5,\r\n                lightDirection: new THREE.Vector3(0.7, 0.7, 0)\r\n            });\r\n\r\n            water.position.set(0, 1, 0); // -70, 1, 0\r\n            water.rotation.set(Math.PI * -0.5, 0, 0);\r\n            water.updateMatrix();\r\n            \r\n            //setTimeout(function() {\r\n                sceneGL.add(water);  \r\n            //}, 200);\r\n            \r\n      //  }\r\n    //}, 3000);\r\n\r\n    \r\n\r\n\r\n    function getRandomInt(min, max) \r\n    {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    function getRandomCol(colours)\r\n    {\r\n        var randColour = getRandomInt(0,colours.length-1);\r\n        return colours[randColour][1].replace(\"#\",\"0x\");\r\n    }\r\n\r\n    // (I say cylinders ... I mean pyramids ... brain-dead moment early on)\r\n    // UPDATE: NOW SHAPES\r\n    // CYLINDERS        TODO: Some patterned ones e.g. Bee colour stripes, \r\n    //                  with Doppler-shift buzz audio from camera position\r\n    //                  nb: nice colour is yellow/gold: 0xafab5b\r\n    var geometryDefault = new THREE.CylinderGeometry(0, 10, 30, 4, 1);\r\n    // ... ok ... three.js calls them cylinders.  Must be where I got it from!!!\r\n\r\n    var materialDefault = new THREE.MeshPhongMaterial({ \r\n                    color: 0xafab5b, \r\n                    shading: THREE.FlatShading, \r\n                    transparent: true,  opacity: 0 });\r\n\r\n    var geometrySphere = new THREE.SphereGeometry( 5, 32, 32 );\r\n\r\n    var geometryComplex = new THREE.Geometry();\r\n\r\n    for ( var count = 0; count < 10; count ++ ) \r\n    {\r\n\r\n        var geo = new THREE.BoxGeometry( 5, 5, 5 );\r\n\r\n        geo.translate( THREE.Math.randFloat( - 5, 5 ), THREE.Math.randFloat( - 5, 5 ), THREE.Math.randFloat( - 5, 5 ) );\r\n\r\n        var color = new THREE.Color().setHex(getRandomCol(colours));\r\n\r\n        for ( var i = 0; i < geo.faces.length; i ++ ) \r\n        {\r\n\r\n            var face = geo.faces[ i ];\r\n            face.vertexColors.push( color, color, color ); // all the same in this case\r\n            //face.color.set( color ); // this works, too; use one or the other\r\n\r\n        }\r\n        geometryComplex.merge( geo );\r\n    }\r\n\r\n    var materialComplex = new THREE.MeshPhongMaterial({ \r\n                    color: 0xffffff, \r\n                    vertexColors: THREE.VertexColors,\r\n                    shading: THREE.FlatShading, \r\n                    transparent: true,  opacity: 0 });\r\n\r\n    setTimeout(function() {\r\n        if (window.fps < 60)\r\n        {\r\n            num_cylinders = window.fps;\r\n        }\r\n        else\r\n        {\r\n            num_cylinders = 60; // plenty!!!\r\n        }\r\n        \r\n        console.log(\"Number of cylinders: \"+ num_cylinders);\r\n        cylinders = new Array(num_cylinders);\r\n\r\n\r\n        let i = 0;\r\n\r\n        let start = Date.now();\r\n\r\n        function addShape() \r\n        {\r\n\r\n            if (i < num_cylinders) \r\n            {\r\n                setTimeout(addShape, Math.floor(30000/window.fps)); \r\n\r\n                if(calmCylinders === false)\r\n                {\r\n                    var setColour = getRandomCol(colours);\r\n                    console.log(\"Adding shape: \" + i);\r\n                    \r\n                    if ( (i < 5) && (window.fps > 50) )\r\n                    {\r\n                        switch(i)\r\n                        {\r\n                            case 0:\r\n                                cylinders[i] = getNewXartaCube( -10,5,-100, \"XARTA\", i, colours);\r\n                                break;\r\n                            case 1:\r\n                                cylinders[i] = getNewXartaCube(   0,5,-200, \"ARTAX\", i, colours);\r\n                                break;\r\n                            case 2:\r\n                                cylinders[i] = getNewXartaCube(  10,5,-300, \"RTAXA\", i, colours);\r\n                                break;\r\n                            case 3:\r\n                                cylinders[i] = getNewXartaCube(  20,5,-400, \"TAXAR\", i, colours);\r\n                                break;\r\n                            case 4:\r\n                                cylinders[i] = getNewXartaCube(  30,5,-400, \"AXART\", i, colours);\r\n                                break;\r\n                        }\r\n    \r\n                    }\r\n                    else if ((window.fps + getRandomInt(0,20) > 36))\r\n                    {\r\n                        if (i < num_cylinders/4)\r\n                        {\r\n                            // separate for different colours though more compute?\r\n                            var geometrySimple = new THREE.CylinderGeometry(0, 10, 30, 4, 1);\r\n                            var materialSimple = new THREE.MeshPhongMaterial({ \r\n                            color: 0xffffff, \r\n                            shading: THREE.FlatShading, \r\n                            transparent: true,  opacity: 0 });\r\n\r\n                            cylinders[i] = new THREE.Mesh(geometrySimple, materialSimple);\r\n                            cylinders[i].material.color.setHex(setColour);\r\n                        }\r\n                        else if (i < num_cylinders/2)\r\n                        {\r\n                            cylinders[i] = new THREE.Mesh(geometryComplex, materialComplex);\r\n                        }\r\n                        else if (i < num_cylinders*0.75)\r\n                        {\r\n                            var geometrySimple = new THREE.SphereGeometry( 10, 64, 64 );\r\n                            var materialSimple = new THREE.MeshPhongMaterial({ \r\n                            color: 0xffffff, \r\n                            shading: THREE.FlatShading, \r\n                            transparent: true,  opacity: 0 });\r\n\r\n                            cylinders[i] = new THREE.Mesh(geometrySimple, materialSimple);\r\n                            cylinders[i].material.color.setHex(setColour);\r\n                        }\r\n                        else\r\n                        {\r\n                            var geometrySimple = new THREE.BoxBufferGeometry( 50, 50, 50 );\r\n                            var materialSimple = new THREE.MeshPhongMaterial({ \r\n                            color: 0xffffff, \r\n                            shading: THREE.FlatShading, \r\n                            transparent: true,  opacity: 0 });\r\n\r\n                            cylinders[i] = new THREE.Mesh(geometrySimple, materialSimple);\r\n                            cylinders[i].material.color.setHex(setColour);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        cylinders[i] = new THREE.Mesh(geometryDefault, materialDefault);\r\n                    }\r\n\r\n                    \r\n                    \r\n\r\n                    cylinders[i].position.x = (Math.random() - 0.5) * range_cylinders;\r\n                    cylinders[i].position.y = (Math.random() - 0.5) * range_cylinders;\r\n                    cylinders[i].position.z = (Math.random() - 0.5) * range_cylinders;\r\n\r\n                    cylinders[i].xartaDirx = (Math.random() - 0.5) * 15; // velocity\r\n                    cylinders[i].xartaDiry = (Math.random() - 0.5) * 10;\r\n                    cylinders[i].xartaDirz = (Math.random() - 0.5) * 20;\r\n\r\n                    cylinders[i].updateMatrix();\r\n                    cylinders[i].matrixAutoUpdate = false;\r\n\r\n\r\n                    sceneGL.add(cylinders[i]);\r\n                    window.num_cylinders_so_far = i;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        addShape();\r\n             \r\n    },6000);\r\n\r\n\r\n\r\n\r\n    // lights (still experimenting)\r\n\r\n    var light = new THREE.DirectionalLight(0xffffff, 3);\r\n    light.position.set(250, -300, 500);\r\n    sceneGL.add(light);\r\n\r\n    var spotLight = new THREE.SpotLight(0xffffff, 1, 200, 20, 10);\r\n    spotLight.position.set( 0, 150, 0 );\r\n    \r\n    var spotTarget = new THREE.Object3D();\r\n    spotTarget.position.set(0, 0, 0);\r\n    spotLight.target = spotTarget;\r\n    \r\n    sceneGL.add(spotLight);\r\n    // sceneGL.add(new THREE.PointLightHelper(spotLight, 1));\r\n\r\n    window.addEventListener('resize', onWindowResize, false);\r\n\r\n}\r\n\r\nfunction onWindowResize() {\r\n\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n\r\n    rendererGL.setSize(window.innerWidth, window.innerHeight);\r\n    rendererCSS3D.setSize( window.innerWidth, window.innerHeight );\r\n\r\n}\r\n\r\n\r\n\r\nfunction calcFps(delta)\r\n{\r\n    frames += 1;\r\n    accDelta += delta;\r\n\r\n    if(accDelta > 1)\r\n    {\r\n        window.fps = frames;\r\n        accDelta = 0;\r\n        frames = 1;\r\n    }\r\n\r\n}\r\nfunction displayCamPos() {\r\n    var p = document.getElementById('cameraPos');\r\n    p.innerHTML =   ( Math.round( (camera.position.x  + 0.00001) * 100) / 100 ) + \", \" + \r\n                    ( Math.round( (camera.position.y  + 0.00001) * 100) / 100 ) + \", \" + \r\n                    ( Math.round( (camera.position.z  + 0.00001) * 100) / 100 ) +\r\n                    '<input type=\"text\" id=\"controlsFocus\" value=\"Control Focus\">';\r\n}\r\n\r\n\r\nfunction animate() {\r\n\r\n    requestAnimationFrame(animate);\r\n\r\n    var delta = clock.getDelta();\r\n    calcFps(delta);\r\n\r\n\r\n    if ( (typeof water === 'undefined' || water === null ||\r\n          typeof delta === 'undefined' || delta === null ) )\r\n    {\r\n        // do nothing\r\n    }\r\n    else\r\n    {\r\n        //delta = 0.0001;\r\n        water.update(delta);\r\n    }\r\n    \r\n\r\n    displayCamPos();\r\n\r\n    //console.log(delta);\r\n    // delta is smaller, the faster the machine\r\n    tumble(delta);\r\n    \r\n    //console.log(fps);\r\n\r\n    if ( !(typeof controls === 'undefined' || controls === null) ){\r\n        controls.update();\r\n    }\r\n\r\n    render();\r\n\r\n}\r\n\r\n\r\n\r\nfunction render() \r\n{\r\n    if ( (typeof video === 'undefined' || video === null) ){\r\n        // do nothing (see if this fixes minify issue)\r\n    }\r\n    else\r\n    {\r\n        if ( video.readyState === video.HAVE_ENOUGH_DATA ) \r\n        {\r\n            videoImageContext.drawImage( video, 0, 0 );\r\n            if ( videoTexture ) \r\n                videoTexture.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    rendererGL.render(sceneGL, camera);\r\n\r\n    if ( (typeof rendererCSS3D === 'undefined' || rendererCSS3D === null) )\r\n    {\r\n        // do nothing    \r\n    }\r\n    else\r\n    {\r\n        rendererCSS3D.render(sceneCSS3D, camera);\r\n    }\r\n    \r\n        \r\n\r\n}\r\n\r\n\r\n"]}